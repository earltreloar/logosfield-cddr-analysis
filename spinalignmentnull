{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1pcToqFSzWmQouulXuOYK5qMwytndWDKo",
      "authorship_tag": "ABX9TyNLTAqYuc3MjUrEtEnwfvb3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/earltreloar/logosfield-cddr-analysis/blob/main/spinalignmentnull\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Mechanism 1 (Auto-Flip) • One-Paste Cell --------------------------------\n",
        "# Works with:\n",
        "#   • CSV on disk:               SOURCE = {\"path\": \"/content/data.csv\", \"member\": None}\n",
        "#   • CSV inside a ZIP archive:  SOURCE = {\"path\": \"/content/drive/MyDrive/repro_bundle.zip\",\n",
        "#                                          \"member\": \"sdss/SDSS_STANDARDIZED.csv\"}\n",
        "#\n",
        "# What it does:\n",
        "#   1) Loads source table (ZIP member or plain CSV).\n",
        "#   2) Finds/derives a spin column:\n",
        "#        - direct \"spin\" or \"spin_num\" or \"spin_sign\" etc.\n",
        "#        - or derive from probabilities (p_cw vs p_ccw) if present.\n",
        "#   3) Auto-flips convention so aligned fraction ≥ 0.5.\n",
        "#   4) Computes Wilson CI, z vs 0.5, one-sided p.\n",
        "#   5) Saves tidy CSVs under ./Mechanism1_repro_out/\n",
        "#\n",
        "# Outputs:\n",
        "#   ./Mechanism1_repro_out/Mechanism1_summary_auto.csv\n",
        "#   ./Mechanism1_repro_out/Mechanism1_significance_auto.csv\n",
        "#\n",
        "# ------------------------------------------------------------------------------\n",
        "\n",
        "import os, io, zipfile\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from math import erf, sqrt\n",
        "from scipy.stats import norm\n",
        "\n",
        "# ============= USER CONFIG =============\n",
        "SOURCE = {\n",
        "    # Path to either a CSV, or a ZIP that contains your CSV\n",
        "    \"path\": \"/content/drive/MyDrive/repro_bundle.zip\",\n",
        "    # If 'path' is a ZIP, set the member path inside the ZIP; else use None\n",
        "    \"member\": \"sdss/SDSS_STANDARDIZED.csv\",  # e.g. \"sdss/SDSS_STANDARDIZED.csv\"\n",
        "}\n",
        "DATASET_LABEL = \"MECH1\"\n",
        "OUT_DIR = \"./Mechanism1_repro_out\"\n",
        "# =======================================\n",
        "\n",
        "\n",
        "# -------------------- helpers --------------------\n",
        "def load_csv(path: str, member: str | None) -> pd.DataFrame:\n",
        "    \"\"\"Load a CSV either directly or from a ZIP member.\"\"\"\n",
        "    if member is None:\n",
        "        return pd.read_csv(path)\n",
        "    with zipfile.ZipFile(path) as zf:\n",
        "        with zf.open(member) as f:\n",
        "            return pd.read_csv(f)\n",
        "\n",
        "def find_col(candidates, cols):\n",
        "    \"\"\"Return the first matching column name (case-insensitive), else None.\"\"\"\n",
        "    lc = {c.lower(): c for c in cols}\n",
        "    for name in candidates:\n",
        "        if name.lower() in lc:\n",
        "            return lc[name.lower()]\n",
        "    return None\n",
        "\n",
        "def ensure_spin(df: pd.DataFrame) -> pd.Series:\n",
        "    \"\"\"\n",
        "    Return a numeric spin series with values in {-1, +1} if possible.\n",
        "    Accepts:\n",
        "      • direct spin columns: [\"spin\", \"spin_num\", \"spin_sign\", \"spinlabel\"]\n",
        "      • or derives from probs: [\"p_cw\",\"p_ccw\"] or [\"p_cwp\",\"p_ccwp\"] etc.\n",
        "    \"\"\"\n",
        "    cols = df.columns\n",
        "\n",
        "    # 1) direct spin?\n",
        "    direct_candidates = [\"spin\",\"spin_num\",\"spin_sign\",\"spinlabel\"]\n",
        "    scol = find_col(direct_candidates, cols)\n",
        "    if scol is not None:\n",
        "        s = pd.to_numeric(df[scol], errors=\"coerce\")\n",
        "        # Clip to {-1, +1} where possible\n",
        "        s = s.where(s.isin([-1, 1]), s)\n",
        "        return s\n",
        "\n",
        "    # 2) derive from probabilities\n",
        "    # common prob names across runs\n",
        "    cw_candidates  = [\"p_cw\", \"p_cwp\", \"p_cw_p\", \"p_cw_prob\", \"p_cw_p_ccw\"]\n",
        "    ccw_candidates = [\"p_ccw\",\"p_ccwp\",\"p_ccw_p\",\"p_ccw_prob\"]\n",
        "    cw  = find_col(cw_candidates, cols)\n",
        "    ccw = find_col(ccw_candidates, cols)\n",
        "\n",
        "    if cw is not None and ccw is not None:\n",
        "        cwv  = pd.to_numeric(df[cw],  errors=\"coerce\")\n",
        "        ccwv = pd.to_numeric(df[ccw], errors=\"coerce\")\n",
        "        # sign: +1 if cw > ccw, else -1\n",
        "        s = np.sign((cwv - ccwv).values)\n",
        "        # map zeros (ties/NaN) to NaN\n",
        "        s = pd.Series(s, index=df.index).replace(0, np.nan)\n",
        "        return s\n",
        "\n",
        "    raise ValueError(\n",
        "        \"Could not locate a spin column or probability columns to derive spin.\\n\"\n",
        "        f\"Available columns: {list(cols)[:25]}{' ...' if len(cols)>25 else ''}\"\n",
        "    )\n",
        "\n",
        "def wilson_ci(k: int, n: int, conf: float = 0.95):\n",
        "    \"\"\"Wilson score interval.\"\"\"\n",
        "    if n == 0:\n",
        "        return (np.nan, np.nan)\n",
        "    z = norm.ppf(1 - (1 - conf) / 2.0)\n",
        "    phat = k / n\n",
        "    denom = 1 + z*z/n\n",
        "    centre = (phat + z*z/(2*n)) / denom\n",
        "    margin = z * sqrt((phat*(1 - phat)/n) + (z*z/(4*n*n))) / denom\n",
        "    return (centre - margin, centre + margin)\n",
        "\n",
        "def z_vs_half(frac: float, n: int):\n",
        "    \"\"\"z against 0.5 using normal approximation.\"\"\"\n",
        "    if n <= 0 or np.isnan(frac):\n",
        "        return np.nan\n",
        "    return (frac - 0.5) / sqrt(0.25 / n)\n",
        "\n",
        "def one_sided_p_from_z(z: float):\n",
        "    \"\"\"One-sided p value from z (H1: frac > 0.5).\"\"\"\n",
        "    if np.isnan(z):\n",
        "        return np.nan\n",
        "    return 0.5 * (1 - erf(z / sqrt(2)))\n",
        "\n",
        "\n",
        "# -------------------- main --------------------\n",
        "os.makedirs(OUT_DIR, exist_ok=True)\n",
        "\n",
        "# Load\n",
        "df = load_csv(SOURCE[\"path\"], SOURCE[\"member\"])\n",
        "print(\"Loaded columns:\", list(df.columns)[:20], \"...\" if len(df.columns) > 20 else \"\")\n",
        "\n",
        "# Spin\n",
        "spin = ensure_spin(df)\n",
        "mask = spin.notna()\n",
        "n_valid = int(mask.sum())\n",
        "print(f\"Non-null spins: {n_valid:,}\")\n",
        "\n",
        "if n_valid == 0:\n",
        "    raise RuntimeError(\"No finite spins found after parsing/derivation.\")\n",
        "\n",
        "# Basic RA/Dec columns (optional, for inspection)\n",
        "ra_col  = find_col([\"ra\", \"ra_deg\", \"ra_targ\"], df.columns)\n",
        "dec_col = find_col([\"dec\",\"dec_deg\",\"dec_targ\"], df.columns)\n",
        "if ra_col and dec_col:\n",
        "    peek = df.loc[mask, [ra_col, dec_col]].head(5)\n",
        "    print(\"\\nSample RA/Dec (first 5):\")\n",
        "    print(peek.to_string(index=False))\n",
        "\n",
        "# Raw fraction (as coded, spin==+1)\n",
        "frac_pos = (spin[mask] == 1).mean()\n",
        "counts   = spin[mask].value_counts(dropna=False).to_dict()\n",
        "print(\"\\nSpin counts:\", counts)\n",
        "print(f\"As-coded fraction spin=+1: {frac_pos:.3f}\")\n",
        "\n",
        "# Auto-flip so aligned ≥ 0.5\n",
        "flipped = False\n",
        "if frac_pos < 0.5:\n",
        "    frac_aligned = 1 - frac_pos\n",
        "    flipped = True\n",
        "else:\n",
        "    frac_aligned = frac_pos\n",
        "\n",
        "k = int(round(frac_aligned * n_valid))\n",
        "ci_lo, ci_hi = wilson_ci(k, n_valid, conf=0.95)\n",
        "z = z_vs_half(frac_aligned, n_valid)\n",
        "p = one_sided_p_from_z(z)\n",
        "\n",
        "print(\"\\n--- Mechanism 1 (Auto-Flip) ---\")\n",
        "print(f\"Dataset: {DATASET_LABEL}\")\n",
        "print(f\"N = {n_valid:,}\")\n",
        "print(f\"Aligned fraction (auto-flip): {frac_aligned:.3f}\")\n",
        "print(f\"95% CI: [{ci_lo:.3f}, {ci_hi:.3f}]\")\n",
        "print(f\"z vs 0.5 = {z:.2f}, one-sided p = {p:.2e}\")\n",
        "print(f\"Flip applied? {flipped}\")\n",
        "\n",
        "# -------------------- save tidy outputs --------------------\n",
        "# Summary table (compact)\n",
        "summary = pd.DataFrame([{\n",
        "    \"dataset\": DATASET_LABEL,\n",
        "    \"alignment_fraction\": frac_aligned,\n",
        "    \"null_fraction\": 1 - frac_aligned,\n",
        "    \"p_value\": p,\n",
        "    \"n_valid\": n_valid,\n",
        "    \"flip_applied\": flipped\n",
        "}])\n",
        "\n",
        "# Significance table (pipeline-style)\n",
        "significance = pd.DataFrame([{\n",
        "    \"dataset\": DATASET_LABEL,\n",
        "    \"rotation_deg\": 0,\n",
        "    \"metric\": \"frac_raw\",\n",
        "    \"n_valid\": n_valid,\n",
        "    \"frac\": frac_aligned,\n",
        "    \"CI95_lo\": ci_lo,\n",
        "    \"CI95_hi\": ci_hi,\n",
        "    \"z_vs_0_5\": z,\n",
        "    \"p_one_sided\": p\n",
        "}])\n",
        "\n",
        "sum_path = os.path.join(OUT_DIR, \"Mechanism1_summary_auto.csv\")\n",
        "sig_path = os.path.join(OUT_DIR, \"Mechanism1_significance_auto.csv\")\n",
        "summary.to_csv(sum_path, index=False)\n",
        "significance.to_csv(sig_path, index=False)\n",
        "\n",
        "print(f\"\\nSaved summary   → {sum_path}\")\n",
        "print(f\"Saved sig table → {sig_path}\")\n",
        "# ------------------------------------------------------------------------------\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zN3I-Kn-Bf8r",
        "outputId": "aaa8bfda-23a0-443c-c5a0-1a9c438721f3"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded columns: ['ra', 'dec', 'spin'] \n",
            "Non-null spins: 667,944\n",
            "\n",
            "Sample RA/Dec (first 5):\n",
            "      ra        dec\n",
            "0.001708 -10.373806\n",
            "0.003083  -9.222278\n",
            "0.004292 -10.946667\n",
            "0.005750  15.509806\n",
            "0.006458  -0.092583\n",
            "\n",
            "Spin counts: {-1: 477719, 1: 190225}\n",
            "As-coded fraction spin=+1: 0.285\n",
            "\n",
            "--- Mechanism 1 (Auto-Flip) ---\n",
            "Dataset: MECH1\n",
            "N = 667,944\n",
            "Aligned fraction (auto-flip): 0.715\n",
            "95% CI: [0.714, 0.716]\n",
            "z vs 0.5 = 351.77, one-sided p = 0.00e+00\n",
            "Flip applied? True\n",
            "\n",
            "Saved summary   → ./Mechanism1_repro_out/Mechanism1_summary_auto.csv\n",
            "Saved sig table → ./Mechanism1_repro_out/Mechanism1_significance_auto.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Mechanism 1 (Auto-Flip with Null) • One-Paste Cell -----------------------\n",
        "import os, zipfile\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from math import erf, sqrt\n",
        "from scipy.stats import norm\n",
        "\n",
        "# ============= USER CONFIG =============\n",
        "SOURCE = {\n",
        "    \"path\": \"/content/drive/MyDrive/repro_bundle.zip\",   # CSV or ZIP path\n",
        "    \"member\": \"sdss/SDSS_STANDARDIZED.csv\",              # or None for plain CSV\n",
        "}\n",
        "DATASET_LABEL = \"MECH1\"\n",
        "OUT_DIR = \"./Mechanism1_repro_out\"\n",
        "# =======================================\n",
        "\n",
        "# -------------------- helpers --------------------\n",
        "def load_csv(path: str, member: str | None) -> pd.DataFrame:\n",
        "    if member is None:\n",
        "        return pd.read_csv(path)\n",
        "    with zipfile.ZipFile(path) as zf:\n",
        "        with zf.open(member) as f:\n",
        "            return pd.read_csv(f)\n",
        "\n",
        "def find_col(candidates, cols):\n",
        "    lc = {c.lower(): c for c in cols}\n",
        "    for name in candidates:\n",
        "        if name.lower() in lc:\n",
        "            return lc[name.lower()]\n",
        "    return None\n",
        "\n",
        "def ensure_spin(df: pd.DataFrame) -> pd.Series:\n",
        "    cols = df.columns\n",
        "    scol = find_col([\"spin\",\"spin_num\",\"spin_sign\",\"spinlabel\"], cols)\n",
        "    if scol is not None:\n",
        "        return pd.to_numeric(df[scol], errors=\"coerce\")\n",
        "    # fallback: derive from probs if present\n",
        "    cw = find_col([\"p_cw\",\"p_cwp\"], cols)\n",
        "    ccw = find_col([\"p_ccw\",\"p_ccwp\"], cols)\n",
        "    if cw and ccw:\n",
        "        s = np.sign(df[cw] - df[ccw])\n",
        "        return pd.Series(s, index=df.index).replace(0, np.nan)\n",
        "    raise ValueError(\"No spin column found.\")\n",
        "\n",
        "def wilson_ci(k, n, conf=0.95):\n",
        "    if n == 0: return (np.nan, np.nan)\n",
        "    z = norm.ppf(1-(1-conf)/2)\n",
        "    phat = k/n\n",
        "    denom = 1+z*z/n\n",
        "    centre = (phat+z*z/(2*n))/denom\n",
        "    margin = z*np.sqrt((phat*(1-phat)/n)+(z*z/(4*n*n)))/denom\n",
        "    return (centre-margin, centre+margin)\n",
        "\n",
        "def z_vs_half(frac, n): return (frac-0.5)/np.sqrt(0.25/n) if n>0 else np.nan\n",
        "def p_from_z(z): return 0.5*(1-erf(z/np.sqrt(2))) if not np.isnan(z) else np.nan\n",
        "\n",
        "# -------------------- main --------------------\n",
        "os.makedirs(OUT_DIR, exist_ok=True)\n",
        "\n",
        "df = load_csv(SOURCE[\"path\"], SOURCE[\"member\"])\n",
        "spin = ensure_spin(df)\n",
        "mask = spin.notna()\n",
        "n_valid = int(mask.sum())\n",
        "\n",
        "frac_pos = (spin[mask]==1).mean()\n",
        "flipped = False\n",
        "if frac_pos < 0.5:\n",
        "    frac_aligned = 1-frac_pos\n",
        "    flipped = True\n",
        "else:\n",
        "    frac_aligned = frac_pos\n",
        "\n",
        "k = int(round(frac_aligned*n_valid))\n",
        "ci_lo, ci_hi = wilson_ci(k, n_valid)\n",
        "z = z_vs_half(frac_aligned, n_valid)\n",
        "p = p_from_z(z)\n",
        "\n",
        "print(\"\\n--- Mechanism 1 (Auto-Flip + Null) ---\")\n",
        "print(f\"N={n_valid}, frac={frac_aligned:.3f}, CI=[{ci_lo:.3f},{ci_hi:.3f}], z={z:.2f}, p={p:.2e}, flip={flipped}\")\n",
        "\n",
        "# -------- Save with Null alongside --------\n",
        "summary = pd.DataFrame([\n",
        "    {\"dataset\": DATASET_LABEL, \"alignment_fraction\": frac_aligned, \"null_fraction\": 0.5,\n",
        "     \"p_value\": p, \"n_valid\": n_valid, \"flip_applied\": flipped},\n",
        "    {\"dataset\": \"NULL\", \"alignment_fraction\": 0.5, \"null_fraction\": 0.5,\n",
        "     \"p_value\": 1.0, \"n_valid\": n_valid, \"flip_applied\": False}\n",
        "])\n",
        "\n",
        "significance = pd.DataFrame([\n",
        "    {\"dataset\": DATASET_LABEL, \"rotation_deg\": 0, \"metric\": \"frac_raw\",\n",
        "     \"n_valid\": n_valid, \"frac\": frac_aligned,\n",
        "     \"CI95_lo\": ci_lo, \"CI95_hi\": ci_hi, \"z_vs_0_5\": z, \"p_one_sided\": p},\n",
        "    {\"dataset\": \"NULL\", \"rotation_deg\": 0, \"metric\": \"frac_raw\",\n",
        "     \"n_valid\": n_valid, \"frac\": 0.5,\n",
        "     \"CI95_lo\": 0.5, \"CI95_hi\": 0.5, \"z_vs_0_5\": 0.0, \"p_one_sided\": 0.5}\n",
        "])\n",
        "\n",
        "sum_path = os.path.join(OUT_DIR, \"Mechanism1_summary_auto_withnull.csv\")\n",
        "sig_path = os.path.join(OUT_DIR, \"Mechanism1_significance_auto_withnull.csv\")\n",
        "summary.to_csv(sum_path,index=False)\n",
        "significance.to_csv(sig_path,index=False)\n",
        "\n",
        "print(f\"Saved summary   → {sum_path}\")\n",
        "print(f\"Saved sig table → {sig_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XkAHAseACCsH",
        "outputId": "1ffa04c4-58b9-41e7-90a8-1684d2b133c9"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Mechanism 1 (Auto-Flip + Null) ---\n",
            "N=667944, frac=0.715, CI=[0.714,0.716], z=351.77, p=0.00e+00, flip=True\n",
            "Saved summary   → ./Mechanism1_repro_out/Mechanism1_summary_auto_withnull.csv\n",
            "Saved sig table → ./Mechanism1_repro_out/Mechanism1_significance_auto_withnull.csv\n"
          ]
        }
      ]
    }
  ]
}