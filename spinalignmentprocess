{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1pcToqFSzWmQouulXuOYK5qMwytndWDKo",
      "authorship_tag": "ABX9TyMs/C7KgUdKW64NSYVZSiE1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/earltreloar/logosfield-cddr-analysis/blob/main/spinalignmentprocess\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 821
        },
        "id": "dvYTrPuMeeMS",
        "outputId": "29cf4996-5aa9-4c8a-fc2d-22f355498e70"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "JWST columns: ['synthetic_id', 'ra_deg', 'dec_deg', 'z', 'p_cw', 'p_ccw', 'label', 'confidence', 'cutout_png'] … total: 9\n",
            "Normalized JWST file → /content/results/jwst_goods_fused_norm.csv (rows=101)\n",
            "Using Logosfield map: /content/drive/MyDrive/Logosfield_scalar_density_map.npy\n",
            "Loaded map: NSIDE=128, Npix=196608\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-828660215.py:42: UserWarning: This pattern is interpreted as a regular expression, and has match groups. To actually get the groups, use str.extract.\n",
            "  cw_regex  = sub.str.contains(r\"\\b(cw|clock[\\s\\-]*wise)\\b\", regex=True)\n",
            "/tmp/ipython-input-828660215.py:43: UserWarning: This pattern is interpreted as a regular expression, and has match groups. To actually get the groups, use str.extract.\n",
            "  ccw_regex = sub.str.contains(r\"\\b(ccw|counter[\\s\\-]*clock[\\s\\-]*wise)\\b\", regex=True)\n",
            "/tmp/ipython-input-828660215.py:166: HealpyDeprecationWarning: \"verbose\" was deprecated in version 1.15.0 and will be removed in a future version. \n",
            "  lap_map = hp.alm2map(hp.almxfl(alm, fl), nside=NSIDE, lmax=lmax, verbose=False)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            dataset  rotation_deg  n_valid  frac_raw  frac_weighted_hub  \\\n",
              "0  JWST_GOODS_FUSED             0        0       NaN                NaN   \n",
              "1  JWST_GOODS_FUSED            30        0       NaN                NaN   \n",
              "2  JWST_GOODS_FUSED            60        0       NaN                NaN   \n",
              "3  JWST_GOODS_FUSED            90        0       NaN                NaN   \n",
              "\n",
              "   frac_in_hub  \n",
              "0          NaN  \n",
              "1          NaN  \n",
              "2          NaN  \n",
              "3          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40150458-1ad7-4603-ac16-62aefaa01fc1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>dataset</th>\n",
              "      <th>rotation_deg</th>\n",
              "      <th>n_valid</th>\n",
              "      <th>frac_raw</th>\n",
              "      <th>frac_weighted_hub</th>\n",
              "      <th>frac_in_hub</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40150458-1ad7-4603-ac16-62aefaa01fc1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-40150458-1ad7-4603-ac16-62aefaa01fc1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-40150458-1ad7-4603-ac16-62aefaa01fc1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f51883cd-d392-4a29-9db5-edea8055de26\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f51883cd-d392-4a29-9db5-edea8055de26')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f51883cd-d392-4a29-9db5-edea8055de26 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d4cd0e81-651e-4534-adcc-746671e2e509\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d4cd0e81-651e-4534-adcc-746671e2e509 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('summary');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "summary",
              "summary": "{\n  \"name\": \"summary\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"dataset\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"JWST_GOODS_FUSED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rotation_deg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38,\n        \"min\": 0,\n        \"max\": 90,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_valid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac_raw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac_weighted_hub\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac_in_hub\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved: /content/results/spin_alignment_summary_with_hubs_JWST.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             dataset  rotation_deg             metric  n_valid  frac  CI95_lo  \\\n",
              "2   JWST_GOODS_FUSED             0        frac_in_hub        0   NaN      NaN   \n",
              "0   JWST_GOODS_FUSED             0           frac_raw        0   NaN      NaN   \n",
              "1   JWST_GOODS_FUSED             0  frac_weighted_hub        0   NaN      NaN   \n",
              "5   JWST_GOODS_FUSED            30        frac_in_hub        0   NaN      NaN   \n",
              "3   JWST_GOODS_FUSED            30           frac_raw        0   NaN      NaN   \n",
              "4   JWST_GOODS_FUSED            30  frac_weighted_hub        0   NaN      NaN   \n",
              "8   JWST_GOODS_FUSED            60        frac_in_hub        0   NaN      NaN   \n",
              "6   JWST_GOODS_FUSED            60           frac_raw        0   NaN      NaN   \n",
              "7   JWST_GOODS_FUSED            60  frac_weighted_hub        0   NaN      NaN   \n",
              "11  JWST_GOODS_FUSED            90        frac_in_hub        0   NaN      NaN   \n",
              "9   JWST_GOODS_FUSED            90           frac_raw        0   NaN      NaN   \n",
              "10  JWST_GOODS_FUSED            90  frac_weighted_hub        0   NaN      NaN   \n",
              "\n",
              "    CI95_hi  z_vs_0.5  p_one_sided  \n",
              "2       NaN       NaN          NaN  \n",
              "0       NaN       NaN          NaN  \n",
              "1       NaN       NaN          NaN  \n",
              "5       NaN       NaN          NaN  \n",
              "3       NaN       NaN          NaN  \n",
              "4       NaN       NaN          NaN  \n",
              "8       NaN       NaN          NaN  \n",
              "6       NaN       NaN          NaN  \n",
              "7       NaN       NaN          NaN  \n",
              "11      NaN       NaN          NaN  \n",
              "9       NaN       NaN          NaN  \n",
              "10      NaN       NaN          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7e61055-7844-4836-8776-f9b728823db3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>dataset</th>\n",
              "      <th>rotation_deg</th>\n",
              "      <th>metric</th>\n",
              "      <th>n_valid</th>\n",
              "      <th>frac</th>\n",
              "      <th>CI95_lo</th>\n",
              "      <th>CI95_hi</th>\n",
              "      <th>z_vs_0.5</th>\n",
              "      <th>p_one_sided</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7e61055-7844-4836-8776-f9b728823db3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7e61055-7844-4836-8776-f9b728823db3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7e61055-7844-4836-8776-f9b728823db3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b0bd8948-bdae-4205-bf6e-b5af9cbe4e13\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0bd8948-bdae-4205-bf6e-b5af9cbe4e13')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b0bd8948-bdae-4205-bf6e-b5af9cbe4e13 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_59e33e40-6f18-4661-83f6-c2944c3e6143\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sig')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_59e33e40-6f18-4661-83f6-c2944c3e6143 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('sig');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sig",
              "summary": "{\n  \"name\": \"sig\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"dataset\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"JWST_GOODS_FUSED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rotation_deg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35,\n        \"min\": 0,\n        \"max\": 90,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"metric\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"frac_in_hub\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_valid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CI95_lo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CI95_hi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"z_vs_0.5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p_one_sided\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved: /content/results/spin_alignment_significance_JWST.csv\n"
          ]
        }
      ],
      "source": [
        "# === ONE-PASS JWST ALIGNMENT ===\n",
        "# - Fuses JWST spins (label or p_cw/p_ccw) -> ra, dec, spin_num\n",
        "# - Normalizes columns (ra/dec/spin_num)  [<- your recent correction #1]\n",
        "# - Runs Logosfield alignment + significance\n",
        "# - Saves results to /content/results/\n",
        "\n",
        "import os, re, glob, json, numpy as np, pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ---------- CONFIG ----------\n",
        "RESULTS_DIR = \"/content/results\"; FIG_DIR = \"/content/figures\"\n",
        "os.makedirs(RESULTS_DIR, exist_ok=True); os.makedirs(FIG_DIR, exist_ok=True)\n",
        "\n",
        "# parameters for gradient sampling / polar gating\n",
        "DELTA_FACTOR   = 1.5   # Δφ = DELTA_FACTOR * hp.nside2resol(NSIDE)  [<- tweakable]\n",
        "GATE_MULT_PIX  = 2.0   # reject within this many pixel-res of poles\n",
        "\n",
        "# ---------- HELPERS ----------\n",
        "def norm_cols(df):\n",
        "    \"\"\"normalize headers: lower + [^a-z0-9] -> '_' \"\"\"\n",
        "    return df.rename(columns={c: re.sub(r'[^0-9a-zA-Z]+','_', c.strip().lower()).strip('_')\n",
        "                              for c in df.columns})\n",
        "\n",
        "def pick(df, cands):\n",
        "    for k in cands:\n",
        "        if k in df.columns: return k\n",
        "    for c in df.columns:\n",
        "        for k in cands:\n",
        "            if k in c: return c\n",
        "    return None\n",
        "\n",
        "def build_spin_num(df):\n",
        "    \"\"\"Return spin_num from label or p_cw/p_ccw.\"\"\"\n",
        "    # 1) labels\n",
        "    lbl = pick(df, [\"label\",\"spin\",\"handed\",\"handedness\",\"cw_ccw\",\"cwacw\",\"orientation\"])\n",
        "    if lbl:\n",
        "        s = df[lbl].astype(str).str.strip().str.lower()\n",
        "        m = s.map({\"cw\":+1, \"ccw\":-1})\n",
        "        need = m.isna()\n",
        "        if need.any():\n",
        "            sub = s[need]\n",
        "            cw_regex  = sub.str.contains(r\"\\b(cw|clock[\\s\\-]*wise)\\b\", regex=True)\n",
        "            ccw_regex = sub.str.contains(r\"\\b(ccw|counter[\\s\\-]*clock[\\s\\-]*wise)\\b\", regex=True)\n",
        "            m.loc[need & cw_regex]  = +1\n",
        "            m.loc[need & ccw_regex] = -1\n",
        "        need = m.isna()\n",
        "        if need.any():\n",
        "            num = pd.to_numeric(s[need], errors=\"coerce\")\n",
        "            if set(num.dropna().unique()) <= {0,1}:\n",
        "                num = num.replace({0:-1, 1:+1})\n",
        "            m.loc[need] = num\n",
        "        if m.notna().any():\n",
        "            return m\n",
        "\n",
        "    # 2) probabilities\n",
        "    # exact common names first\n",
        "    def best_prob_columns(cols):\n",
        "        low = {c:c.lower() for c in cols}\n",
        "        cw_exact  = [c for c in cols if low[c] in (\"p_cw\",\"cw_prob\",\"p_cw_weighted\",\"pcw\",\"p_cw_p_ccw\")]  # allow weird header\n",
        "        acw_exact = [c for c in cols if low[c] in (\"p_ccw\",\"p_acw\",\"ccw_prob\",\"p_acw_weighted\",\"pacw\")]\n",
        "        if cw_exact and acw_exact: return cw_exact[0], acw_exact[0]\n",
        "        cw_guess  = [c for c in cols if re.search(r\"\\bcw\\b\",  low[c])]\n",
        "        acw_guess = [c for c in cols if re.search(r\"\\b(acw|ccw)\\b\", low[c])]\n",
        "        return (cw_guess[0], acw_guess[0]) if (cw_guess and acw_guess) else (None,None)\n",
        "\n",
        "    cw_col, acw_col = best_prob_columns(df.columns)\n",
        "    if cw_col and acw_col:\n",
        "        cw  = pd.to_numeric(df[cw_col],  errors=\"coerce\")\n",
        "        ccw = pd.to_numeric(df[acw_col], errors=\"coerce\")\n",
        "        s   = np.sign(cw - ccw).replace(0, np.nan)\n",
        "        if pd.Series(s).notna().any():\n",
        "            return s\n",
        "\n",
        "    raise RuntimeError(\"No usable spin labels or probabilities found in JWST file.\")\n",
        "\n",
        "# ---------- FUSE JWST (label/prob -> spin_num) + NORMALIZE RA/DEC ----------\n",
        "# find your JWST auto results\n",
        "jwst_paths = sorted(glob.glob(\"/content/drive/**/*jwst_auto_results*.csv\", recursive=True))\n",
        "assert jwst_paths, \"Could not find jwst_auto_results.csv under /content/drive.\"\n",
        "JWST_PATH = jwst_paths[0]\n",
        "\n",
        "raw = pd.read_csv(JWST_PATH, low_memory=True)\n",
        "df  = norm_cols(raw.copy())\n",
        "print(\"JWST columns:\", list(df.columns)[:20], \"… total:\", len(df.columns))\n",
        "\n",
        "ra_c  = pick(df, [\"ra\",\"ra_deg\",\"ra_targ\",\"raj2000\",\"ra2000\"])\n",
        "dec_c = pick(df, [\"dec\",\"dec_deg\",\"dec_targ\",\"decj2000\",\"dec2000\"])\n",
        "assert ra_c and dec_c, \"RA/Dec not found in JWST file.\"\n",
        "\n",
        "# normalized columns (your recent correction #2)\n",
        "out = pd.DataFrame({\n",
        "    \"ra\":  pd.to_numeric(df[ra_c],  errors=\"coerce\"),\n",
        "    \"dec\": pd.to_numeric(df[dec_c], errors=\"coerce\")\n",
        "})\n",
        "out[\"spin_num\"] = build_spin_num(df)\n",
        "\n",
        "fused = out.dropna(subset=[\"ra\",\"dec\",\"spin_num\"]).reset_index(drop=True)\n",
        "JWST_NORM = f\"{RESULTS_DIR}/jwst_goods_fused_norm.csv\"\n",
        "fused.to_csv(JWST_NORM, index=False)\n",
        "print(f\"Normalized JWST file → {JWST_NORM} (rows={len(fused)})\")\n",
        "\n",
        "# ---------- HEALPY / LOGOSFIELD MAP ----------\n",
        "try:\n",
        "    import healpy as hp\n",
        "    from astropy.io import fits\n",
        "except:\n",
        "    !pip -q install healpy astropy\n",
        "    import healpy as hp\n",
        "    from astropy.io import fits\n",
        "\n",
        "def find_one(patterns):\n",
        "    for pat in patterns:\n",
        "        hits = glob.glob(os.path.join(\"/content\",\"**\",pat), recursive=True)\n",
        "        hits = [h for h in hits if \"/sample_data/\" not in h]\n",
        "        if hits: return sorted(hits, key=len)[0]\n",
        "    return None\n",
        "\n",
        "MAP_PATH = find_one([\"*Logosfield*scalar*map*.npy\",\"*Logosfield_scalar_density_map*.npy\",\"*.npy\"])\n",
        "assert MAP_PATH, \"No Logosfield .npy map found under /content.\"\n",
        "print(\"Using Logosfield map:\", MAP_PATH)\n",
        "\n",
        "def load_logos_map(path):\n",
        "    try:\n",
        "        arr = np.load(path)\n",
        "    except ValueError:\n",
        "        arr = np.load(path, allow_pickle=True)\n",
        "    if hasattr(arr,\"files\"):\n",
        "        for k in [\"map\",\"L\",\"logosfield\",\"scalar\",\"data\"]:\n",
        "            if k in arr.files: arr = arr[k]; break\n",
        "        else:\n",
        "            arr = arr[arr.files[0]]\n",
        "    if isinstance(arr,np.ndarray) and arr.dtype==object:\n",
        "        try:\n",
        "            obj = arr.item()\n",
        "            if isinstance(obj,dict):\n",
        "                for k in [\"map\",\"L\",\"logosfield\",\"scalar\",\"data\"]:\n",
        "                    if k in obj: arr = obj[k]; break\n",
        "            else:\n",
        "                arr = np.asarray(obj)\n",
        "        except Exception:\n",
        "            arr = np.asarray(arr.tolist())\n",
        "    arr = np.asarray(arr)\n",
        "    if arr.ndim>1: arr = arr.squeeze()\n",
        "    if not np.issubdtype(arr.dtype,np.number): arr = arr.astype(float)\n",
        "    return arr\n",
        "\n",
        "Lmap  = load_logos_map(MAP_PATH)\n",
        "NSIDE = hp.npix2nside(Lmap.size)\n",
        "res   = hp.nside2resol(NSIDE)\n",
        "dphi  = DELTA_FACTOR * res\n",
        "print(f\"Loaded map: NSIDE={NSIDE}, Npix={Lmap.size}\")\n",
        "\n",
        "# mask (optional)\n",
        "MASK_PATH = find_one([\"*mask*.fits\",\"glimpse_mask.fits\",\"*mask*.fz\",\"*mask*.fit\"])\n",
        "if MASK_PATH and os.path.exists(MASK_PATH):\n",
        "    with fits.open(MASK_PATH) as hdul: mdat = hdul[0].data\n",
        "    mask_keep = (mdat.astype(bool) if mdat.size==Lmap.size else np.ones_like(Lmap,bool))\n",
        "    if mdat.size!=Lmap.size: print(\"Mask resolution mismatch; ignoring mask.\"); mask_keep = np.ones_like(Lmap,bool)\n",
        "else:\n",
        "    mask_keep = np.ones_like(Lmap,bool)\n",
        "\n",
        "# ∇²L (laplacian) for hub weights\n",
        "lmax = 3*NSIDE-1\n",
        "alm  = hp.map2alm(Lmap, lmax=lmax, iter=0)\n",
        "fl   = np.array([-(ell*(ell+1)) for ell in range(lmax+1)], float)\n",
        "lap_map = hp.alm2map(hp.almxfl(alm, fl), nside=NSIDE, lmax=lmax, verbose=False)\n",
        "\n",
        "# ---------- ALIGNMENT ----------\n",
        "def grad_phi_sign(ra_deg, dec_deg, rot_deg=0.0):\n",
        "    theta = np.radians(90.0 - dec_deg)\n",
        "    phi   = (np.radians(ra_deg + rot_deg)) % (2*np.pi)\n",
        "    if theta < GATE_MULT_PIX*res or (np.pi-theta) < GATE_MULT_PIX*res: return np.nan\n",
        "    Lp = hp.get_interp_val(Lmap, theta, (phi + dphi)%(2*np.pi))\n",
        "    Lm = hp.get_interp_val(Lmap, theta, (phi - dphi)%(2*np.pi))\n",
        "    if not np.isfinite(Lp) or not np.isfinite(Lm): return np.nan\n",
        "    if not mask_keep[hp.ang2pix(NSIDE, theta, phi)]: return np.nan\n",
        "    dL = Lp - Lm\n",
        "    return 1.0 if (np.isfinite(dL) and dL>0) else (-1.0 if (np.isfinite(dL) and dL<0) else np.nan)\n",
        "\n",
        "def abs_laplacian(ra_deg, dec_deg):\n",
        "    theta = np.radians(90.0 - dec_deg)\n",
        "    phi   = np.radians(ra_deg) % (2*np.pi)\n",
        "    v = hp.get_interp_val(lap_map, theta, phi)\n",
        "    return abs(v) if np.isfinite(v) else np.nan\n",
        "\n",
        "def weighted_fraction(aligned_bool, weights):\n",
        "    m = np.isfinite(aligned_bool) & np.isfinite(weights)\n",
        "    if not m.any(): return np.nan\n",
        "    w = np.asarray(weights[m], float); a = np.asarray(aligned_bool[m], float)\n",
        "    s = w.sum();  return float((w*a).sum()/s) if s>0 else np.nan\n",
        "\n",
        "def run_alignment_table(df, label):\n",
        "    d = df.dropna(subset=[\"ra\",\"dec\",\"spin_num\"]).copy()\n",
        "    # hub weights\n",
        "    d[\"abs_lap\"] = d.apply(lambda r: abs_laplacian(r[\"ra\"], r[\"dec\"]), axis=1)\n",
        "    med = np.nanmedian(d[\"abs_lap\"].values); med = med if np.isfinite(med) and med!=0 else 1.0\n",
        "    d[\"w_hub\"] = d[\"abs_lap\"]/med\n",
        "    thr = np.nanpercentile(d[\"abs_lap\"].values, 90) if np.isfinite(d[\"abs_lap\"]).any() else np.nan\n",
        "    d[\"in_hub\"] = d[\"abs_lap\"] >= thr if np.isfinite(thr) else False\n",
        "\n",
        "    rows=[]; rotations=[0.0,30.0,60.0,90.0]\n",
        "    for rot in rotations:\n",
        "        pred = d.apply(lambda r: grad_phi_sign(r[\"ra\"], r[\"dec\"], rot_deg=rot), axis=1)\n",
        "        ok   = pred.notna() & d[\"spin_num\"].notna()\n",
        "        n_ok = int(ok.sum())\n",
        "        if n_ok==0:\n",
        "            frac_raw=frac_w=frac_h=np.nan\n",
        "        else:\n",
        "            aligned = (np.sign(pred[ok]) == np.sign(d.loc[ok,\"spin_num\"])).astype(float)\n",
        "            frac_raw = float(aligned.mean())\n",
        "            frac_w   = weighted_fraction(aligned.values, d.loc[ok,\"w_hub\"].values)\n",
        "            hubmask  = ok & d[\"in_hub\"]\n",
        "            frac_h   = float(aligned[d[\"in_hub\"][ok].values].mean()) if hubmask.any() else np.nan\n",
        "        rows.append({\"dataset\":label,\"rotation_deg\":int(rot),\"n_valid\":n_ok,\n",
        "                     \"frac_raw\":frac_raw,\"frac_weighted_hub\":frac_w,\"frac_in_hub\":frac_h})\n",
        "    return pd.DataFrame(rows), d\n",
        "\n",
        "jwst_df = pd.read_csv(JWST_NORM)\n",
        "summary, d_used = run_alignment_table(jwst_df, \"JWST_GOODS_FUSED\")\n",
        "display(summary)\n",
        "summary_path = f\"{RESULTS_DIR}/spin_alignment_summary_with_hubs_JWST.csv\"\n",
        "summary.to_csv(summary_path, index=False); print(\"Saved:\", summary_path)\n",
        "\n",
        "# histogram (for sanity)\n",
        "plt.figure()\n",
        "d_used[\"spin_num\"].dropna().astype(int).astype(str).value_counts().sort_index().plot(kind=\"bar\")\n",
        "plt.title(\"JWST_GOODS_FUSED spin distribution\"); plt.xlabel(\"spin_num (−1,+1)\"); plt.ylabel(\"count\")\n",
        "plt.savefig(f\"{FIG_DIR}/jwst_goods_fused_hist.png\", dpi=140, bbox_inches=\"tight\"); plt.close()\n",
        "\n",
        "# ---------- SIGNIFICANCE vs 0.5 ----------\n",
        "from math import sqrt\n",
        "def wilson_ci(k,n,z=1.96):\n",
        "    if n==0: return (np.nan,np.nan)\n",
        "    p=k/n; denom=1+z**2/n\n",
        "    center=(p+z*z/(2*n))/denom\n",
        "    half=z*np.sqrt((p*(1-p)+z*z/(4*n))/n)/denom\n",
        "    return (center-half, center+half)\n",
        "def z_p_one_sided(frac,n,p0=0.5):\n",
        "    if n==0 or not np.isfinite(frac): return (np.nan,np.nan)\n",
        "    se=np.sqrt(p0*(1-p0)/n);  z=(frac-p0)/se;  p=0.5*(1-np.math.erf(z/np.sqrt(2)))\n",
        "    return (z,p)\n",
        "\n",
        "rows=[]\n",
        "for _,r in summary.iterrows():\n",
        "    for metric in [\"frac_raw\",\"frac_weighted_hub\",\"frac_in_hub\"]:\n",
        "        n=int(r[\"n_valid\"]); f=r[metric]\n",
        "        k=int(round(f*n)) if np.isfinite(f) else 0\n",
        "        lo,hi=wilson_ci(k,n); z,p=z_p_one_sided(f,n)\n",
        "        rows.append({\"dataset\":r[\"dataset\"],\"rotation_deg\":r[\"rotation_deg\"],\n",
        "                     \"metric\":metric,\"n_valid\":n,\"frac\":f,\"CI95_lo\":lo,\"CI95_hi\":hi,\n",
        "                     \"z_vs_0.5\":z,\"p_one_sided\":p})\n",
        "sig = pd.DataFrame(rows).sort_values([\"rotation_deg\",\"metric\"])\n",
        "display(sig)\n",
        "sig_path = f\"{RESULTS_DIR}/spin_alignment_significance_JWST.csv\"\n",
        "sig.to_csv(sig_path, index=False); print(\"Saved:\", sig_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/results/jwst_goods_fused_norm.csv\")\n",
        "print(\"JWST fused shape:\", df.shape)\n",
        "print(df.head(10))\n",
        "\n",
        "print(\"\\nSpin_num distribution:\")\n",
        "print(df[\"spin_num\"].value_counts(dropna=False))\n",
        "\n",
        "print(\"\\nRA/Dec ranges:\")\n",
        "print(\"RA:\", df[\"ra\"].min(), \"→\", df[\"ra\"].max())\n",
        "print(\"Dec:\", df[\"dec\"].min(), \"→\", df[\"dec\"].max())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZpkoqV7AiyZT",
        "outputId": "25c4d286-3100-4287-b92d-47857d6ce691"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "JWST fused shape: (101, 3)\n",
            "           ra        dec  spin_num\n",
            "0  189.123825  62.215497      -1.0\n",
            "1  189.158245  62.221360      -1.0\n",
            "2  189.082652  62.252477       1.0\n",
            "3  189.091790  62.253741      -1.0\n",
            "4  189.079819  62.256461       1.0\n",
            "5  189.151966  62.259635       1.0\n",
            "6  189.128421  62.262772       1.0\n",
            "7  189.162149  62.263811      -1.0\n",
            "8  189.138077  62.274452       1.0\n",
            "9  189.202603  62.275509       1.0\n",
            "\n",
            "Spin_num distribution:\n",
            "spin_num\n",
            " 1.0    56\n",
            "-1.0    45\n",
            "Name: count, dtype: int64\n",
            "\n",
            "RA/Dec ranges:\n",
            "RA: 189.0429059199801 → 189.2864686321385\n",
            "Dec: 62.15479059557762 → 62.303048994477386\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np, pandas as pd, healpy as hp\n",
        "\n",
        "df = pd.read_csv(\"/content/results/jwst_goods_fused_norm.csv\")\n",
        "\n",
        "print(\"rows:\", len(df))\n",
        "NSIDE = hp.npix2nside(len(globals().get(\"Lmap\", np.array([]))) or 196608)  # fallback if Lmap not in scope\n",
        "res   = hp.nside2resol(NSIDE)                                              # radians\n",
        "dphi  = 1.5 * res\n",
        "\n",
        "def diag_row(r):\n",
        "    ra, dec = r[\"ra\"], r[\"dec\"]\n",
        "    theta = np.radians(90.0 - dec)\n",
        "    phi   = np.radians(ra) % (2*np.pi)\n",
        "    near_pole = (theta < 2.0*res) or ((np.pi - theta) < 2.0*res)\n",
        "    Lp = hp.get_interp_val(Lmap, theta, (phi + dphi)%(2*np.pi))\n",
        "    Lm = hp.get_interp_val(Lmap, theta, (phi - dphi)%(2*np.pi))\n",
        "    return pd.Series({\n",
        "        \"near_pole\": bool(near_pole),\n",
        "        \"Lp_finite\": np.isfinite(Lp),\n",
        "        \"Lm_finite\": np.isfinite(Lm),\n",
        "    })\n",
        "\n",
        "D = df.apply(diag_row, axis=1)\n",
        "print(\"\\nDiagnostics counts:\")\n",
        "print(D.agg([\"sum\"]).T.astype(int))\n",
        "print(\"\\nRows with BOTH finite samples:\", int((D[\"Lp_finite\"] & D[\"Lm_finite\"]).sum()))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZbrCNFq7jZtB",
        "outputId": "010eff19-b23b-426b-953f-0c622c4f80e6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rows: 101\n",
            "\n",
            "Diagnostics counts:\n",
            "           sum\n",
            "near_pole    0\n",
            "Lp_finite  101\n",
            "Lm_finite  101\n",
            "\n",
            "Rows with BOTH finite samples: 101\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- PATCH: disable mask + re-run alignment on the normalized JWST file ---\n",
        "import numpy as np, pandas as pd, healpy as hp\n",
        "import os, matplotlib.pyplot as plt\n",
        "from math import sqrt\n",
        "\n",
        "RESULTS_DIR = \"/content/results\"\n",
        "FIG_DIR     = \"/content/figures\"\n",
        "JWST_NORM   = f\"{RESULTS_DIR}/jwst_goods_fused_norm.csv\"\n",
        "\n",
        "# Reuse Lmap/NSIDE if they exist; otherwise reload them quickly\n",
        "try:\n",
        "    Lmap\n",
        "    NSIDE\n",
        "except NameError:\n",
        "    import glob\n",
        "    def find_one(patterns):\n",
        "        for pat in patterns:\n",
        "            hits = glob.glob(os.path.join(\"/content\",\"**\",pat), recursive=True)\n",
        "            hits = [h for h in hits if \"/sample_data/\" not in h]\n",
        "            if hits: return sorted(hits, key=len)[0]\n",
        "        return None\n",
        "    MAP_PATH = find_one([\"*Logosfield*scalar*map*.npy\",\"*Logosfield_scalar_density_map*.npy\",\"*.npy\"])\n",
        "    assert MAP_PATH, \"No Logosfield map found.\"\n",
        "    def load_logos_map(path):\n",
        "        import numpy as np\n",
        "        try:\n",
        "            arr = np.load(path)\n",
        "        except ValueError:\n",
        "            arr = np.load(path, allow_pickle=True)\n",
        "        if hasattr(arr,\"files\"):\n",
        "            for k in [\"map\",\"L\",\"logosfield\",\"scalar\",\"data\"]:\n",
        "                if k in arr.files: arr = arr[k]; break\n",
        "            else: arr = arr[arr.files[0]]\n",
        "        if isinstance(arr,np.ndarray) and arr.dtype==object:\n",
        "            try:\n",
        "                obj = arr.item()\n",
        "                if isinstance(obj,dict):\n",
        "                    for k in [\"map\",\"L\",\"logosfield\",\"scalar\",\"data\"]:\n",
        "                        if k in obj: arr = obj[k]; break\n",
        "                else: arr = np.asarray(obj)\n",
        "            except Exception:\n",
        "                arr = np.asarray(arr.tolist())\n",
        "        arr = np.asarray(arr)\n",
        "        if arr.ndim>1: arr = arr.squeeze()\n",
        "        if not np.issubdtype(arr.dtype,np.number): arr = arr.astype(float)\n",
        "        return arr\n",
        "    Lmap  = load_logos_map(MAP_PATH)\n",
        "    NSIDE = hp.npix2nside(Lmap.size)\n",
        "\n",
        "# Disable mask entirely\n",
        "mask_keep = np.ones_like(Lmap, dtype=bool)\n",
        "\n",
        "# Grad settings (keep same as before)\n",
        "res   = hp.nside2resol(NSIDE)\n",
        "DELTA_FACTOR  = 1.5     # tweak if you want\n",
        "GATE_MULT_PIX = 2.0     # tweak if you want\n",
        "dphi = DELTA_FACTOR * res\n",
        "\n",
        "# Build Laplacian map (for hub weights)\n",
        "lmax    = 3*NSIDE-1\n",
        "alm     = hp.map2alm(Lmap, lmax=lmax, iter=0)\n",
        "fl      = np.array([-(ell*(ell+1)) for ell in range(lmax+1)], float)\n",
        "lap_map = hp.alm2map(hp.almxfl(alm, fl), nside=NSIDE, lmax=lmax, verbose=False)\n",
        "\n",
        "def grad_phi_sign(ra_deg, dec_deg, rot_deg=0.0):\n",
        "    theta = np.radians(90.0 - dec_deg)\n",
        "    phi   = (np.radians(ra_deg + rot_deg)) % (2*np.pi)\n",
        "    if theta < GATE_MULT_PIX*res or (np.pi-theta) < GATE_MULT_PIX*res: return np.nan\n",
        "    Lp = hp.get_interp_val(Lmap, theta, (phi + dphi)%(2*np.pi))\n",
        "    Lm = hp.get_interp_val(Lmap, theta, (phi - dphi)%(2*np.pi))\n",
        "    if not (np.isfinite(Lp) and np.isfinite(Lm)): return np.nan\n",
        "    # mask disabled -> always True:\n",
        "    dL = Lp - Lm\n",
        "    if not np.isfinite(dL): return np.nan\n",
        "    return 1.0 if dL>0 else -1.0\n",
        "\n",
        "def abs_laplacian(ra_deg, dec_deg):\n",
        "    theta = np.radians(90.0 - dec_deg)\n",
        "    phi   = np.radians(ra_deg) % (2*np.pi)\n",
        "    v = hp.get_interp_val(lap_map, theta, phi)\n",
        "    return abs(v) if np.isfinite(v) else np.nan\n",
        "\n",
        "def weighted_fraction(aligned_bool, weights):\n",
        "    m = np.isfinite(aligned_bool) & np.isfinite(weights)\n",
        "    if not m.any(): return np.nan\n",
        "    w = np.asarray(weights[m], float); a = np.asarray(aligned_bool[m], float)\n",
        "    s = w.sum();  return float((w*a).sum()/s) if s>0 else np.nan\n",
        "\n",
        "def run_alignment(df, label):\n",
        "    d = df.dropna(subset=[\"ra\",\"dec\",\"spin_num\"]).copy()\n",
        "    # hub weights\n",
        "    d[\"abs_lap\"] = d.apply(lambda r: abs_laplacian(r[\"ra\"], r[\"dec\"]), axis=1)\n",
        "    med = np.nanmedian(d[\"abs_lap\"].values);  med = med if np.isfinite(med) and med!=0 else 1.0\n",
        "    d[\"w_hub\"] = d[\"abs_lap\"]/med\n",
        "    thr = np.nanpercentile(d[\"abs_lap\"].values, 90) if np.isfinite(d[\"abs_lap\"]).any() else np.nan\n",
        "    d[\"in_hub\"] = d[\"abs_lap\"] >= thr if np.isfinite(thr) else False\n",
        "\n",
        "    rows=[]; rotations=[0.0,30.0,60.0,90.0]\n",
        "    for rot in rotations:\n",
        "        pred = d.apply(lambda r: grad_phi_sign(r[\"ra\"], r[\"dec\"], rot_deg=rot), axis=1)\n",
        "        ok   = pred.notna() & d[\"spin_num\"].notna()\n",
        "        n_ok = int(ok.sum())\n",
        "        if n_ok==0:\n",
        "            frac_raw=frac_w=frac_h=np.nan\n",
        "        else:\n",
        "            aligned = (np.sign(pred[ok]) == np.sign(d.loc[ok,\"spin_num\"])).astype(float)\n",
        "            frac_raw = float(aligned.mean())\n",
        "            frac_w   = weighted_fraction(aligned.values, d.loc[ok,\"w_hub\"].values)\n",
        "            hubmask  = ok & d[\"in_hub\"]\n",
        "            frac_h   = float(aligned[d[\"in_hub\"][ok].values].mean()) if hubmask.any() else np.nan\n",
        "        rows.append({\"dataset\":label,\"rotation_deg\":int(rot),\"n_valid\":n_ok,\n",
        "                     \"frac_raw\":frac_raw,\"frac_weighted_hub\":frac_w,\"frac_in_hub\":frac_h})\n",
        "    return pd.DataFrame(rows)\n",
        "\n",
        "# Run\n",
        "df = pd.read_csv(JWST_NORM)\n",
        "summary = run_alignment(df, \"JWST_GOODS_FUSED\")\n",
        "display(summary)\n",
        "summary.to_csv(f\"{RESULTS_DIR}/spin_alignment_summary_with_hubs_JWST.csv\", index=False)\n",
        "\n",
        "# Significance\n",
        "def wilson_ci(k,n,z=1.96):\n",
        "    if n==0: return (np.nan,np.nan)\n",
        "    p=k/n; denom=1+z**2/n\n",
        "    center=(p+z*z/(2*n))/denom\n",
        "    half=z*np.sqrt((p*(1-p)+z*z/(4*n))/n)/denom\n",
        "    return (center-half, center+half)\n",
        "def z_p_one_sided(frac,n,p0=0.5):\n",
        "    if n==0 or not np.isfinite(frac): return (np.nan,np.nan)\n",
        "    se=np.sqrt(p0*(1-p0)/n); z=(frac-p0)/se\n",
        "    p=0.5*(1-np.math.erf(z/np.sqrt(2))); return (z,p)\n",
        "\n",
        "rows=[]\n",
        "for _,r in summary.iterrows():\n",
        "    for metric in [\"frac_raw\",\"frac_weighted_hub\",\"frac_in_hub\"]:\n",
        "        n=int(r[\"n_valid\"]); f=r[metric]\n",
        "        k=int(round(f*n)) if np.isfinite(f) else 0\n",
        "        lo,hi=wilson_ci(k,n); z,p=z_p_one_sided(f,n)\n",
        "        rows.append({\"dataset\":r[\"dataset\"],\"rotation_deg\":r[\"rotation_deg\"],\n",
        "                     \"metric\":metric,\"n_valid\":n,\"frac\":f,\"CI95_lo\":lo,\"CI95_hi\":hi,\n",
        "                     \"z_vs_0.5\":z,\"p_one_sided\":p})\n",
        "sig = pd.DataFrame(rows).sort_values([\"rotation_deg\",\"metric\"])\n",
        "display(sig)\n",
        "sig.to_csv(f\"{RESULTS_DIR}/spin_alignment_significance_JWST.csv\", index=False)\n",
        "print(\"Re-run saved at:\", RESULTS_DIR)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "fhnIQXerkESs",
        "outputId": "09ae02b4-af3d-4203-b97d-29a9c5a966cc"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1511120611.py:63: HealpyDeprecationWarning: \"verbose\" was deprecated in version 1.15.0 and will be removed in a future version. \n",
            "  lap_map = hp.alm2map(hp.almxfl(alm, fl), nside=NSIDE, lmax=lmax, verbose=False)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            dataset  rotation_deg  n_valid  frac_raw  frac_weighted_hub  \\\n",
              "0  JWST_GOODS_FUSED             0      101  0.445545           0.456176   \n",
              "1  JWST_GOODS_FUSED            30      101  0.445545           0.456176   \n",
              "2  JWST_GOODS_FUSED            60      101  0.445545           0.456176   \n",
              "3  JWST_GOODS_FUSED            90      101  0.445545           0.456176   \n",
              "\n",
              "   frac_in_hub  \n",
              "0     0.454545  \n",
              "1     0.454545  \n",
              "2     0.454545  \n",
              "3     0.454545  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc82009c-0273-4ab7-adde-99b3da51126b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>dataset</th>\n",
              "      <th>rotation_deg</th>\n",
              "      <th>n_valid</th>\n",
              "      <th>frac_raw</th>\n",
              "      <th>frac_weighted_hub</th>\n",
              "      <th>frac_in_hub</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.454545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.454545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.454545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.454545</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc82009c-0273-4ab7-adde-99b3da51126b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dc82009c-0273-4ab7-adde-99b3da51126b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dc82009c-0273-4ab7-adde-99b3da51126b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e91fe517-f12a-4ed6-b304-ed0fd98130da\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e91fe517-f12a-4ed6-b304-ed0fd98130da')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e91fe517-f12a-4ed6-b304-ed0fd98130da button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f962b955-29cf-4a05-ae4d-4b94d4964e41\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f962b955-29cf-4a05-ae4d-4b94d4964e41 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('summary');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "summary",
              "summary": "{\n  \"name\": \"summary\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"dataset\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"JWST_GOODS_FUSED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rotation_deg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38,\n        \"min\": 0,\n        \"max\": 90,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_valid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 101,\n        \"max\": 101,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac_raw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.44554455445544555,\n        \"max\": 0.44554455445544555,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.44554455445544555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac_weighted_hub\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.4561763636182571,\n        \"max\": 0.4561763636182571,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.4561763636182571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac_in_hub\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.45454545454545453,\n        \"max\": 0.45454545454545453,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.45454545454545453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "module 'numpy' has no attribute 'math'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1511120611.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"n_valid\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m         \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m         \u001b[0mlo\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwilson_ci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mz_p_one_sided\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    139\u001b[0m         rows.append({\"dataset\":r[\"dataset\"],\"rotation_deg\":r[\"rotation_deg\"],\n\u001b[1;32m    140\u001b[0m                      \u001b[0;34m\"metric\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"n_valid\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"frac\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"CI95_lo\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlo\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"CI95_hi\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mhi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-1511120611.py\u001b[0m in \u001b[0;36mz_p_one_sided\u001b[0;34m(frac, n, p0)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfrac\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m     \u001b[0mse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp0\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mp0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfrac\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mp0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m     \u001b[0mp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m \u001b[0mrows\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/numpy/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(attr)\u001b[0m\n\u001b[1;32m    408\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mchar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchararray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 410\u001b[0;31m         raise AttributeError(\"module {!r} has no attribute \"\n\u001b[0m\u001b[1;32m    411\u001b[0m                              \"{!r}\".format(__name__, attr))\n\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'numpy' has no attribute 'math'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# summary already exists from the alignment step\n",
        "\n",
        "def wilson_ci(k, n, z=1.96):\n",
        "    if n == 0: return (np.nan, np.nan)\n",
        "    p = k / n\n",
        "    denom  = 1 + z*z/n\n",
        "    center = (p + z*z/(2*n)) / denom\n",
        "    half   = z*math.sqrt((p*(1-p) + z*z/(4*n)) / n) / denom\n",
        "    return (center - half, center + half)\n",
        "\n",
        "def z_p_one_sided(frac, n, p0=0.5):\n",
        "    \"\"\"One-sided test: P(Frac > p0) under Binomial normal approx.\"\"\"\n",
        "    if n == 0 or not np.isfinite(frac): return (np.nan, np.nan)\n",
        "    se = math.sqrt(p0*(1-p0)/n)\n",
        "    z  = (frac - p0) / se\n",
        "    p  = 0.5*(1 - math.erf(z / math.sqrt(2)))  # SF using erf\n",
        "    return (z, p)\n",
        "\n",
        "rows = []\n",
        "for _, r in summary.iterrows():\n",
        "    for metric in [\"frac_raw\", \"frac_weighted_hub\", \"frac_in_hub\"]:\n",
        "        n = int(r[\"n_valid\"])\n",
        "        f = float(r[metric]) if np.isfinite(r[metric]) else np.nan\n",
        "        k = int(round(f*n)) if np.isfinite(f) else 0\n",
        "        lo, hi = wilson_ci(k, n)\n",
        "        z, p   = z_p_one_sided(f, n)\n",
        "        rows.append({\n",
        "            \"dataset\": r[\"dataset\"],\n",
        "            \"rotation_deg\": r[\"rotation_deg\"],\n",
        "            \"metric\": metric,\n",
        "            \"n_valid\": n,\n",
        "            \"frac\": f,\n",
        "            \"CI95_lo\": lo,\n",
        "            \"CI95_hi\": hi,\n",
        "            \"z_vs_0.5\": z,\n",
        "            \"p_one_sided\": p\n",
        "        })\n",
        "\n",
        "sig = pd.DataFrame(rows).sort_values([\"rotation_deg\",\"metric\"])\n",
        "display(sig)\n",
        "\n",
        "sig_path = \"/content/results/spin_alignment_significance_JWST.csv\"\n",
        "sig.to_csv(sig_path, index=False)\n",
        "print(\"Saved:\", sig_path)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "d2HmIUR2kami",
        "outputId": "db77b51a-81e3-4e32-efde-b80df7aaf1d0"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             dataset  rotation_deg             metric  n_valid      frac  \\\n",
              "2   JWST_GOODS_FUSED             0        frac_in_hub      101  0.454545   \n",
              "0   JWST_GOODS_FUSED             0           frac_raw      101  0.445545   \n",
              "1   JWST_GOODS_FUSED             0  frac_weighted_hub      101  0.456176   \n",
              "5   JWST_GOODS_FUSED            30        frac_in_hub      101  0.454545   \n",
              "3   JWST_GOODS_FUSED            30           frac_raw      101  0.445545   \n",
              "4   JWST_GOODS_FUSED            30  frac_weighted_hub      101  0.456176   \n",
              "8   JWST_GOODS_FUSED            60        frac_in_hub      101  0.454545   \n",
              "6   JWST_GOODS_FUSED            60           frac_raw      101  0.445545   \n",
              "7   JWST_GOODS_FUSED            60  frac_weighted_hub      101  0.456176   \n",
              "11  JWST_GOODS_FUSED            90        frac_in_hub      101  0.454545   \n",
              "9   JWST_GOODS_FUSED            90           frac_raw      101  0.445545   \n",
              "10  JWST_GOODS_FUSED            90  frac_weighted_hub      101  0.456176   \n",
              "\n",
              "     CI95_lo   CI95_hi  z_vs_0.5  p_one_sided  \n",
              "2   0.361734  0.552422 -0.913625     0.819543  \n",
              "0   0.352378  0.542702 -1.094541     0.863141  \n",
              "1   0.361734  0.552422 -0.880844     0.810799  \n",
              "5   0.361734  0.552422 -0.913625     0.819543  \n",
              "3   0.352378  0.542702 -1.094541     0.863141  \n",
              "4   0.361734  0.552422 -0.880844     0.810799  \n",
              "8   0.361734  0.552422 -0.913625     0.819543  \n",
              "6   0.352378  0.542702 -1.094541     0.863141  \n",
              "7   0.361734  0.552422 -0.880844     0.810799  \n",
              "11  0.361734  0.552422 -0.913625     0.819543  \n",
              "9   0.352378  0.542702 -1.094541     0.863141  \n",
              "10  0.361734  0.552422 -0.880844     0.810799  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9aecb09-0254-4bbc-8dac-7acecaa908a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>dataset</th>\n",
              "      <th>rotation_deg</th>\n",
              "      <th>metric</th>\n",
              "      <th>n_valid</th>\n",
              "      <th>frac</th>\n",
              "      <th>CI95_lo</th>\n",
              "      <th>CI95_hi</th>\n",
              "      <th>z_vs_0.5</th>\n",
              "      <th>p_one_sided</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.913625</td>\n",
              "      <td>0.819543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.352378</td>\n",
              "      <td>0.542702</td>\n",
              "      <td>-1.094541</td>\n",
              "      <td>0.863141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>0</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.880844</td>\n",
              "      <td>0.810799</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.913625</td>\n",
              "      <td>0.819543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.352378</td>\n",
              "      <td>0.542702</td>\n",
              "      <td>-1.094541</td>\n",
              "      <td>0.863141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>30</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.880844</td>\n",
              "      <td>0.810799</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.913625</td>\n",
              "      <td>0.819543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.352378</td>\n",
              "      <td>0.542702</td>\n",
              "      <td>-1.094541</td>\n",
              "      <td>0.863141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>60</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.880844</td>\n",
              "      <td>0.810799</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>frac_in_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.913625</td>\n",
              "      <td>0.819543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>frac_raw</td>\n",
              "      <td>101</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.352378</td>\n",
              "      <td>0.542702</td>\n",
              "      <td>-1.094541</td>\n",
              "      <td>0.863141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>JWST_GOODS_FUSED</td>\n",
              "      <td>90</td>\n",
              "      <td>frac_weighted_hub</td>\n",
              "      <td>101</td>\n",
              "      <td>0.456176</td>\n",
              "      <td>0.361734</td>\n",
              "      <td>0.552422</td>\n",
              "      <td>-0.880844</td>\n",
              "      <td>0.810799</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9aecb09-0254-4bbc-8dac-7acecaa908a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9aecb09-0254-4bbc-8dac-7acecaa908a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9aecb09-0254-4bbc-8dac-7acecaa908a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c77b9dd9-5d3d-40fc-92a1-10d7c59b08ae\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c77b9dd9-5d3d-40fc-92a1-10d7c59b08ae')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c77b9dd9-5d3d-40fc-92a1-10d7c59b08ae button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_b66d1501-4dc9-4b60-b8bc-0c5a974c102a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sig')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b66d1501-4dc9-4b60-b8bc-0c5a974c102a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('sig');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sig",
              "summary": "{\n  \"name\": \"sig\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"dataset\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"JWST_GOODS_FUSED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rotation_deg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35,\n        \"min\": 0,\n        \"max\": 90,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"metric\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"frac_in_hub\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_valid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 101,\n        \"max\": 101,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frac\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004883012394978858,\n        \"min\": 0.44554455445544555,\n        \"max\": 0.4561763636182571,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.45454545454545453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CI95_lo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004606850143667319,\n        \"min\": 0.35237789075506937,\n        \"max\": 0.36173444762795837,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.35237789075506937\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CI95_hi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00478571852978536,\n        \"min\": 0.5427019248906285,\n        \"max\": 0.5524217651730671,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5427019248906285\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"z_vs_0.5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09814733445185833,\n        \"min\": -1.094540909230988,\n        \"max\": -0.8808441898034892,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -0.9136250564655357\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p_one_sided\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.023911330722170332,\n        \"min\": 0.8107989208857989,\n        \"max\": 0.8631410922228634,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.8195430521582185\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved: /content/results/spin_alignment_significance_JWST.csv\n"
          ]
        }
      ]
    }
  ]
}