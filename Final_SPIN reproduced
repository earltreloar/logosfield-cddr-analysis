{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1FEMWRwSY_TWFnBXSBLSvA_RqSGnskfub",
      "authorship_tag": "ABX9TyN0cphAc0EQDEUbr7e0zp4q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/earltreloar/logosfield-cddr-analysis/blob/main/Final_SPIN%20reproduced\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MYQnKPrOdv9a",
        "outputId": "b98020d2-3f29-4edc-cc39-6999485dbd74"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Per-bin results:\n",
            "   zmin  zmax  target_p_align      n  k_aligned  observed_fraction  null_mean  \\\n",
            "0   0.0   0.5            0.64  26484      17076           0.644767   0.500105   \n",
            "1   0.5   1.0            0.68  32973      22494           0.682195   0.500176   \n",
            "2   1.0   2.0            0.72  31198      22467           0.720142   0.499979   \n",
            "\n",
            "    null_sd      log10BF  \n",
            "0  0.003118   486.236798  \n",
            "1  0.002811   968.910738  \n",
            "2  0.002612  1357.419613  \n",
            "\n",
            "Pooled:\n",
            "{'k': 62037, 'n': 100000, 'p_obs': 0.62037, 'p0_mean': np.float64(0.49993599999999994), 'p0_sd': np.float64(0.001623811546916647), 'log10BF': np.float64(1269.8638200077817)}\n",
            "\n",
            "All outputs zipped at: /content/sim_mech1_alignment_tuned_v2_bundle.zip\n"
          ]
        }
      ],
      "source": [
        "# sim_mech1_alignment_runner_v2.ipynb — one-cell runner\n",
        "# Reproduces the tuned-v2 simulation, prints results, and bundles outputs.\n",
        "\n",
        "import numpy as np, pandas as pd, os, json, math, zipfile\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# -------------------- Configuration --------------------\n",
        "N   = 100_000\n",
        "MC  = 600\n",
        "SEED= 22\n",
        "BINS = [(0.0, 0.5, 0.64),\n",
        "        (0.5, 1.0, 0.68),\n",
        "        (1.0, 2.0, 0.72)]\n",
        "\n",
        "OUTDIR = \"/content/sim_mech1_alignment_tuned_v2\"\n",
        "ZIP    = \"/content/sim_mech1_alignment_tuned_v2_bundle.zip\"\n",
        "os.makedirs(OUTDIR, exist_ok=True)\n",
        "\n",
        "# -------------------- Helpers --------------------\n",
        "rng = np.random.default_rng(SEED)\n",
        "\n",
        "def ra_dec_to_unit(ra_deg, dec_deg):\n",
        "    ra  = np.deg2rad(ra_deg)\n",
        "    dec = np.deg2rad(dec_deg)\n",
        "    x = np.cos(dec)*np.cos(ra)\n",
        "    y = np.cos(dec)*np.sin(ra)\n",
        "    z = np.sin(dec)\n",
        "    return np.vstack([x,y,z]).T\n",
        "\n",
        "def assign_spins(expected_sign, p_align, rng):\n",
        "    flips = rng.random(len(expected_sign)) > p_align\n",
        "    spins = expected_sign.copy()\n",
        "    spins[flips] *= -1\n",
        "    return spins\n",
        "\n",
        "def log10_bayes_factor_binomial(n, k, p0):\n",
        "    if n == 0 or p0<=0 or p0>=1: return np.nan\n",
        "    log10_m1 = -math.log10(n + 1.0)\n",
        "    lnC = math.lgamma(n+1) - math.lgamma(k+1) - math.lgamma(n-k+1)\n",
        "    log10C = lnC / math.log(10.0)\n",
        "    log10_m0 = log10C + k*math.log10(p0) + (n-k)*math.log10(1.0 - p0)\n",
        "    return log10_m1 - log10_m0\n",
        "\n",
        "# -------------------- Synthetic catalog --------------------\n",
        "ra  = rng.uniform(0, 360, size=N)\n",
        "u   = rng.uniform(-1, 1, size=N)\n",
        "dec = np.rad2deg(np.arcsin(u))\n",
        "z   = np.clip(np.random.default_rng(5).gamma(shape=2.0, scale=0.5, size=N),0,2)\n",
        "\n",
        "L0  = np.array([0.4, -0.3, 0.865]); L0 /= np.linalg.norm(L0)\n",
        "xyz = ra_dec_to_unit(ra, dec)\n",
        "Q   = np.array([[0.2,0,0],[0,-0.1,0],[0,0,0.05]])\n",
        "Ln  = L0 + 0.3*(xyz @ Q.T); Ln /= np.linalg.norm(Ln, axis=1, keepdims=True)\n",
        "dots = np.sum(xyz*Ln, axis=1)\n",
        "expected_sign = np.where(dots>=0, 1, -1)\n",
        "\n",
        "p_align = np.zeros(N)\n",
        "for zmin, zmax, p in BINS:\n",
        "    mask = (z>=zmin)&(z<zmax); p_align[mask] = p\n",
        "spins = assign_spins(expected_sign, p_align, rng)\n",
        "\n",
        "# -------------------- Stats per bin --------------------\n",
        "rows = []\n",
        "for zmin, zmax, p in BINS:\n",
        "    idx = np.where((z>=zmin)&(z<zmax))[0]\n",
        "    n = len(idx); k = (spins[idx]==expected_sign[idx]).sum(); frac = k/n\n",
        "    hits = [ (np.random.permutation(spins[idx])==expected_sign[idx]).sum()/n for _ in range(MC) ]\n",
        "    p0_mean, p0_sd = np.mean(hits), np.std(hits, ddof=1)\n",
        "    log10BF = log10_bayes_factor_binomial(n, k, p0_mean)\n",
        "    rows.append({\"zmin\":zmin,\"zmax\":zmax,\"target_p_align\":p,\n",
        "                 \"n\":n,\"k_aligned\":int(k),\n",
        "                 \"observed_fraction\":frac,\"null_mean\":p0_mean,\n",
        "                 \"null_sd\":p0_sd,\"log10BF\":log10BF})\n",
        "bin_table = pd.DataFrame(rows)\n",
        "\n",
        "# Pooled\n",
        "n_tot = len(spins); k_tot = (spins==expected_sign).sum(); frac_tot = k_tot/n_tot\n",
        "hits_tot = [ (np.random.permutation(spins)==expected_sign).sum()/n_tot for _ in range(MC) ]\n",
        "p0_mean_tot, p0_sd_tot = np.mean(hits_tot), np.std(hits_tot, ddof=1)\n",
        "log10BF_tot = log10_bayes_factor_binomial(n_tot, k_tot, p0_mean_tot)\n",
        "pooled = {\"k\":int(k_tot),\"n\":int(n_tot),\"p_obs\":float(frac_tot),\n",
        "          \"p0_mean\":p0_mean_tot,\"p0_sd\":p0_sd_tot,\"log10BF\":log10BF_tot}\n",
        "\n",
        "# -------------------- Save outputs --------------------\n",
        "bin_csv   = os.path.join(OUTDIR,\"alignment_by_zbin_tuned_v2.csv\")\n",
        "pooled_js = os.path.join(OUTDIR,\"alignment_pooled_tuned_v2.json\")\n",
        "summary   = os.path.join(OUTDIR,\"alignment_summary_tuned_v2.txt\")\n",
        "bin_table.to_csv(bin_csv,index=False)\n",
        "with open(pooled_js,\"w\") as f: json.dump(pooled,f,indent=2)\n",
        "\n",
        "with open(summary,\"w\") as f:\n",
        "    f.write(\"Mechanism #1 — Simulated Alignment (tuned v2)\\n\")\n",
        "    f.write(\"=\"*60+\"\\n\\n\")\n",
        "    f.write(bin_table.to_string(index=False)+\"\\n\\n\")\n",
        "    f.write(\"Pooled results:\\n\")\n",
        "    for k,v in pooled.items():\n",
        "        f.write(f\"{k}: {v}\\n\")\n",
        "\n",
        "# -------------------- Print results to screen --------------------\n",
        "print(\"Per-bin results:\")\n",
        "print(bin_table)\n",
        "print(\"\\nPooled:\")\n",
        "print(pooled)\n",
        "\n",
        "# -------------------- Plots --------------------\n",
        "plt.figure()\n",
        "x = np.arange(len(BINS))\n",
        "plt.errorbar(x, bin_table[\"null_mean\"], yerr=bin_table[\"null_sd\"], fmt='o', label=\"Null mean ± sd\")\n",
        "plt.plot(x, bin_table[\"observed_fraction\"], 's', label=\"Observed\")\n",
        "plt.xticks(x, [f\"{b[0]}–{b[1]}\" for b in BINS])\n",
        "plt.xlabel(\"Redshift bin (z)\"); plt.ylabel(\"Alignment fraction\")\n",
        "plt.title(\"Spin alignment vs null by redshift bin (tuned v2)\"); plt.legend()\n",
        "plot1 = os.path.join(OUTDIR,\"plot_alignment_by_bin_tuned_v2.png\")\n",
        "plt.savefig(plot1,dpi=140,bbox_inches=\"tight\"); plt.close()\n",
        "\n",
        "plt.figure()\n",
        "plt.hist(hits_tot, bins=30); plt.axvline(pooled[\"p_obs\"], linestyle=\"--\",color=\"red\")\n",
        "plt.xlabel(\"Alignment fraction under null (pooled)\"); plt.ylabel(\"Frequency\")\n",
        "plt.title(\"Pooled null vs observed (tuned v2)\")\n",
        "plot2 = os.path.join(OUTDIR,\"plot_pooled_null_hist_tuned_v2.png\")\n",
        "plt.savefig(plot2,dpi=140,bbox_inches=\"tight\"); plt.close()\n",
        "\n",
        "# -------------------- Bundle everything --------------------\n",
        "with zipfile.ZipFile(ZIP,\"w\",zipfile.ZIP_DEFLATED) as zf:\n",
        "    for f in [bin_csv, pooled_js, summary, plot1, plot2]:\n",
        "        zf.write(f, arcname=os.path.basename(f))\n",
        "\n",
        "print(\"\\nAll outputs zipped at:\", ZIP)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Upload JWST GOODS-N CSV ---\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "\n",
        "# Upload file (expects jades_goodsn_ra_dec_z.csv)\n",
        "uploaded = files.upload()\n",
        "fname = list(uploaded.keys())[0]\n",
        "\n",
        "# Load CSV\n",
        "df = pd.read_csv(fname)\n",
        "\n",
        "# Preview first rows and column names\n",
        "print(\"Columns:\", df.columns.tolist())\n",
        "print(df.head())\n",
        "\n",
        "# --- Expecting: RA_TARG, Dec_TARG, z_Spec, (optionally spin) ---\n",
        "ra = df[df.columns[0]].to_numpy()   # or use 'RA_TARG' if column exists\n",
        "dec = df[df.columns[1]].to_numpy()  # or use 'Dec_TARG'\n",
        "z   = df[df.columns[2]].to_numpy()  # or 'z_Spec'\n",
        "\n",
        "# Check if spin column is present\n",
        "if \"spin\" in df.columns:\n",
        "    spins = df[\"spin\"].to_numpy().astype(int)\n",
        "    print(f\"✅ Loaded {len(df)} galaxies with RA, Dec, z, spin.\")\n",
        "else:\n",
        "    spins = None\n",
        "    print(f\"⚠️ Loaded {len(df)} galaxies with RA, Dec, z — but no spin column yet.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "id": "RgK8w_nTzJj2",
        "outputId": "5559b6ed-ae7a-4abe-d429-3766b2f761e3"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-6e586ff9-d6ee-432f-82a5-5b2984451eac\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-6e586ff9-d6ee-432f-82a5-5b2984451eac\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving jades_goodsn_ra_dec_z.csv to jades_goodsn_ra_dec_z (2).csv\n",
            "Columns: ['RA_TARG', 'Dec_TARG', 'z_Spec']\n",
            "      RA_TARG   Dec_TARG    z_Spec\n",
            "0  189.132464  62.211894 -1.000000\n",
            "1  189.137065  62.213273  3.909444\n",
            "2  189.131012  62.213989  2.442181\n",
            "3  189.129198  62.215141  3.909191\n",
            "4  189.146379  62.215508  4.064162\n",
            "⚠️ Loaded 1561 galaxies with RA, Dec, z — but no spin column yet.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "exec(open(\"header_inspector.py\").read())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "gzmVCxZxALYA",
        "outputId": "5e8ccb67-e969-46a0-f3ef-49c533876f42"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a767b291-4145-4ce7-ab04-245dee70f72f\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a767b291-4145-4ce7-ab04-245dee70f72f\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving ceers_spin_redshift_flagged.xlsx to ceers_spin_redshift_flagged (2).xlsx\n",
            "Saving jades_goodsn_ra_dec_z.csv to jades_goodsn_ra_dec_z (7).csv\n",
            "Saving vizier_votable.tsv to vizier_votable (5).tsv\n",
            "\n",
            "================================================================================\n",
            "FILE: ceers_spin_redshift_flagged (2).xlsx\n",
            "ROWS=5  COLS=10\n",
            "COLUMNS: ['dataset', 'z_bin', 'z_center', 'N', 'CW_count', 'CCW_count', 'CW_frac', 'majority_frac', 'binom_p_vs_50', 'passes_alpha_0.05'] \n",
            "SAMPLE:\n",
            "dataset  z_bin  z_center  N  CW_count  CCW_count  CW_frac  majority_frac  binom_p_vs_50  passes_alpha_0.05\n",
            "  CEERS  0â€“1       0.5  0         0          0      NaN            NaN            NaN              False\n",
            "  CEERS  1â€“2       1.5  0         0          0      NaN            NaN            NaN              False\n",
            "  CEERS  2â€“4       3.0  0         0          0      NaN            NaN            NaN              False\n",
            "  CEERS  4â€“8       6.0  0         0          0      NaN            NaN            NaN              False\n",
            "  CEERS 8â€“14      11.0  0         0          0      NaN            NaN            NaN              False\n",
            "SUGGESTED ⇒ RA: None   DEC: None   SPIN: None   ID: None\n",
            "If any are None or wrong, note the exact column names for the mapping file.\n",
            "\n",
            "================================================================================\n",
            "FILE: jades_goodsn_ra_dec_z (7).csv\n",
            "ROWS=1561  COLS=3\n",
            "COLUMNS: ['RA_TARG', 'Dec_TARG', 'z_Spec'] \n",
            "SAMPLE:\n",
            "   RA_TARG  Dec_TARG    z_Spec\n",
            "189.132464 62.211894 -1.000000\n",
            "189.137065 62.213273  3.909444\n",
            "189.131012 62.213989  2.442181\n",
            "189.129198 62.215141  3.909191\n",
            "189.146379 62.215508  4.064162\n",
            "SUGGESTED ⇒ RA: RA_TARG   DEC: Dec_TARG   SPIN: None   ID: None\n",
            "If any are None or wrong, note the exact column names for the mapping file.\n",
            "[vizier_votable (5).tsv] READ ERROR: Could not determine delimiter\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ==== Decipher RA/Dec/Spin — Compact Helper v1.0 ====\n",
        "MAX_MATCH_ARCSEC = 3.0\n",
        "\n",
        "import sys, io, os, re, zipfile, numpy as np, pandas as pd\n",
        "\n",
        "def _pip(pkg):\n",
        "    import subprocess, sys\n",
        "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg, \"--quiet\"])\n",
        "\n",
        "IN_COLAB=False\n",
        "try:\n",
        "    from google.colab import files as colab_files\n",
        "    IN_COLAB=True\n",
        "except Exception:\n",
        "    IN_COLAB=False\n",
        "\n",
        "# Readers\n",
        "def sniff_read(buff, explicit_sep=None):\n",
        "    try:\n",
        "        return pd.read_csv(buff, sep=explicit_sep, engine=\"python\", comment=\"#\", na_values=[\"\", \"NaN\",\"nan\"])\n",
        "    except Exception:\n",
        "        return pd.read_csv(buff, sep=None, engine=\"python\", comment=\"#\", na_values=[\"\", \"NaN\",\"nan\"])\n",
        "\n",
        "def read_any(name_or_bytes, display_name=None):\n",
        "    if isinstance(name_or_bytes, tuple):\n",
        "        name, data = name_or_bytes\n",
        "        low = name.lower()\n",
        "        bio = io.BytesIO(data)\n",
        "        return _read_any_stream(bio, low), name\n",
        "    else:\n",
        "        name = str(name_or_bytes)\n",
        "        low = name.lower()\n",
        "        if low.endswith(\".zip\"):\n",
        "            with zipfile.ZipFile(name_or_bytes) as z:\n",
        "                inner = [n for n in z.namelist() if n.lower().endswith((\".csv\",\".tsv\",\".txt\",\".xlsx\",\".parquet\",\".fits\",\".vot\",\".xml\"))]\n",
        "                if not inner:\n",
        "                    raise ValueError(\"No supported files inside zip\")\n",
        "                pick = inner[0]\n",
        "                with z.open(pick) as f:\n",
        "                    data = f.read()\n",
        "                return _read_any_stream(io.BytesIO(data), pick.lower()), f\"{name}::{pick}\"\n",
        "        else:\n",
        "            with open(name_or_bytes, \"rb\") as f:\n",
        "                data = f.read()\n",
        "            return _read_any_stream(io.BytesIO(data), low), os.path.basename(name_or_bytes)\n",
        "\n",
        "def _read_any_stream(bio, lowname):\n",
        "    if lowname.endswith((\".csv\",\".tsv\",\".txt\")):\n",
        "        sep = \"\\t\" if lowname.endswith(\".tsv\") else None\n",
        "        return sniff_read(bio, explicit_sep=sep)\n",
        "    if lowname.endswith(\".xlsx\"):\n",
        "        try: import openpyxl\n",
        "        except Exception: _pip(\"openpyxl\")\n",
        "        return pd.read_excel(bio)\n",
        "    if lowname.endswith(\".parquet\"):\n",
        "        try:\n",
        "            import pyarrow.parquet as pq\n",
        "        except Exception:\n",
        "            _pip(\"pyarrow\"); import pyarrow.parquet as pq\n",
        "        return pq.read_table(bio).to_pandas()\n",
        "    if lowname.endswith(\".fits\"):\n",
        "        try:\n",
        "            import astropy.io.fits as fits\n",
        "            from astropy.table import Table\n",
        "        except Exception:\n",
        "            _pip(\"astropy\"); import astropy.io.fits as fits; from astropy.table import Table\n",
        "        with fits.open(bio) as hdul:\n",
        "            for h in hdul:\n",
        "                if h.data is not None:\n",
        "                    try: return Table(h.data).to_pandas()\n",
        "                    except Exception: continue\n",
        "        raise ValueError(\"No table HDU found in FITS\")\n",
        "    if lowname.endswith((\".vot\",\".xml\")) or \"votable\" in lowname:\n",
        "        try:\n",
        "            from astropy.io.votable import parse_single_table\n",
        "        except Exception:\n",
        "            _pip(\"astropy\"); from astropy.io.votable import parse_single_table\n",
        "        vot = parse_single_table(bio).to_table()\n",
        "        return vot.to_pandas()\n",
        "    return sniff_read(bio, explicit_sep=None)\n",
        "\n",
        "# Column helpers\n",
        "RA_CANDS  = [\"ra\",\"RA\",\"ra_deg\",\"RA_deg\",\"RAJ2000\",\"RA_TARG\",\"ALPHA_J2000\",\"RightAscension\"]\n",
        "DEC_CANDS = [\"dec\",\"DEC\",\"dec_deg\",\"Dec_deg\",\"DEJ2000\",\"Dec_TARG\",\"DELTA_J2000\",\"Declination\"]\n",
        "ID_CANDS  = [\"id\",\"ID\",\"ObjID\",\"objid\",\"ObjectID\",\"source_id\",\"SOURCE_ID\",\"catalog_id\",\"dr7objid\",\"objID\"]\n",
        "\n",
        "def sexa_to_deg(val, is_ra):\n",
        "    if pd.isna(val): return np.nan\n",
        "    if isinstance(val, (int,float,np.floating)): return float(val)\n",
        "    s=str(val).strip()\n",
        "    m=re.match(r\"^\\s*([+-]?\\d+):(\\d+):([\\d\\.]+)\\s*$\", s)\n",
        "    if m:\n",
        "        sign = -1.0 if s.strip().startswith(\"-\") else 1.0\n",
        "        d = abs(float(m.group(1))); mi=float(m.group(2)); sec=float(m.group(3))\n",
        "        v = d + mi/60.0 + sec/3600.0\n",
        "        if is_ra: v*=15.0\n",
        "        return sign*v if not is_ra else v\n",
        "    try: return float(s)\n",
        "    except: return np.nan\n",
        "\n",
        "def coerce_ra_dec(df, ra_col, dec_col):\n",
        "    ra, dec = df[ra_col], df[dec_col]\n",
        "    if ra.dtype.kind in \"iufc\" and dec.dtype.kind in \"iufc\":\n",
        "        return pd.to_numeric(ra, errors=\"coerce\"), pd.to_numeric(dec, errors=\"coerce\")\n",
        "    return ra.apply(lambda x: sexa_to_deg(x, True)), dec.apply(lambda x: sexa_to_deg(x, False))\n",
        "\n",
        "def pick(df, cands):\n",
        "    for c in df.columns:\n",
        "        if c in cands or c.lower() in [x.lower() for x in cands]:\n",
        "            return c\n",
        "    return None\n",
        "\n",
        "def detect_spin(df):\n",
        "    lower = {c.lower(): c for c in df.columns}\n",
        "    if \"spin\" in lower:\n",
        "        s = pd.to_numeric(df[lower[\"spin\"]], errors=\"coerce\")\n",
        "        uniq = set(pd.unique(s.dropna()))\n",
        "        if uniq <= {0,1}: s = s.replace({0:-1,1:1})\n",
        "        return s\n",
        "    for name in [\"handedness\",\"class\",\"label\",\"cw_ccw\",\"spiral\",\"chirality\"]:\n",
        "        if name in lower:\n",
        "            t = df[lower[name]].astype(str).str.lower().str.strip()\n",
        "            mapping={\"cw\":+1,\"clockwise\":+1,\"right\":+1,\"acw\":-1,\"ccw\":-1,\"counterclockwise\":-1,\"left\":-1}\n",
        "            return t.map(mapping)\n",
        "    pcw = lower.get(\"p_cw\") or lower.get(\"prob_cw\"); pacw = lower.get(\"p_acw\") or lower.get(\"prob_acw\")\n",
        "    if pcw and pacw:\n",
        "        pcw_v  = pd.to_numeric(df[pcw], errors=\"coerce\")\n",
        "        pacw_v = pd.to_numeric(df[pacw], errors=\"coerce\")\n",
        "        return np.sign(pcw_v - pacw_v).replace(0, np.nan)\n",
        "    return None\n",
        "\n",
        "# Main\n",
        "def main():\n",
        "    print(\"== Decipher RA/Dec/Spin — Compact Helper v1.0 ==\")\n",
        "    if not IN_COLAB:\n",
        "        raise SystemExit(\"Please run this in Colab (uses file upload UI).\")\n",
        "\n",
        "    print(\"Upload the TARGET catalog (the one you want normalized).\")\n",
        "    ups = colab_files.upload()\n",
        "    tname = list(ups.keys())[0]\n",
        "    target_df, disp = read_any((tname, ups[tname]))\n",
        "    print(f\"[TARGET] {disp}  rows={len(target_df)}  cols={len(target_df.columns)}\")\n",
        "    print(\"Columns:\", list(target_df.columns)[:40])\n",
        "\n",
        "    ra_c = pick(target_df, RA_CANDS); dec_c = pick(target_df, DEC_CANDS)\n",
        "    ra_deg, dec_deg = coerce_ra_dec(target_df, ra_c, dec_c)\n",
        "    out = pd.DataFrame({\"ra_deg\": ra_deg, \"dec_deg\": dec_deg})\n",
        "\n",
        "    # carry z if present\n",
        "    z_c = None\n",
        "    for zname in [\"z\",\"z_spec\",\"zspec\",\"z_phot\",\"zphot\",\"redshift\",\"Z_Spec\",\"z_Spec\"]:\n",
        "        if zname.lower() in [c.lower() for c in target_df.columns]:\n",
        "            z_c = [c for c in target_df.columns if c.lower()==zname.lower()][0]\n",
        "            break\n",
        "    if z_c: out[\"z\"] = pd.to_numeric(target_df[z_c], errors=\"coerce\")\n",
        "\n",
        "    spin = detect_spin(target_df)\n",
        "    if spin is None or spin.notna().sum()==0:\n",
        "        print(\"\\n[TARGET] No spin found. Upload a SPIN SOURCE file.\")\n",
        "        ups2 = colab_files.upload()\n",
        "        sname = list(ups2.keys())[0]\n",
        "        spin_df, sdisp = read_any((sname, ups2[sname]))\n",
        "        print(f\"[SPIN] {sdisp}  rows={len(spin_df)}\")\n",
        "        spins = detect_spin(spin_df)\n",
        "        if spins is None:\n",
        "            raise SystemExit(\"Spin source lacks a detectable spin column.\")\n",
        "        out[\"spin\"] = pd.to_numeric(spins, errors=\"coerce\").replace({0:-1,1:1})\n",
        "    else:\n",
        "        out[\"spin\"] = pd.to_numeric(spin, errors=\"coerce\").replace({0:-1,1:1})\n",
        "\n",
        "    out[\"weight\"] = 1.0\n",
        "    out = out.dropna(subset=[\"ra_deg\",\"dec_deg\"])\n",
        "    out[\"ra_deg\"] = np.mod(out[\"ra_deg\"], 360.0)\n",
        "    out[\"dec_deg\"]= out[\"dec_deg\"].clip(-90,90)\n",
        "\n",
        "    os.makedirs(\"normalized_outputs\", exist_ok=True)\n",
        "    out_path = os.path.join(\"normalized_outputs\", f\"{os.path.splitext(tname)[0]}__normalized.csv\")\n",
        "    out.to_csv(out_path, index=False)\n",
        "    print(\"\\nSaved normalized file:\", out_path)\n",
        "\n",
        "main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "v21mPEZ6IsVg",
        "outputId": "0d7b0b2e-e005-4f2f-f0b1-1781ec6fd849"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "== Decipher RA/Dec/Spin — Compact Helper v1.0 ==\n",
            "Upload the TARGET catalog (the one you want normalized).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5b2c97b0-675f-4483-b195-bf654366335e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5b2c97b0-675f-4483-b195-bf654366335e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving jades_goodsn_ra_dec_z.csv to jades_goodsn_ra_dec_z (9).csv\n",
            "[TARGET] jades_goodsn_ra_dec_z (9).csv  rows=1561  cols=3\n",
            "Columns: ['RA_TARG', 'Dec_TARG', 'z_Spec']\n",
            "\n",
            "[TARGET] No spin found. Upload a SPIN SOURCE file.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-68ed2f64-0490-47b9-83e2-05dc4e62cca0\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-68ed2f64-0490-47b9-83e2-05dc4e62cca0\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving combined_jades_standardized.xlsx to combined_jades_standardized (2).xlsx\n",
            "[SPIN] combined_jades_standardized (2).xlsx  rows=0\n",
            "\n",
            "Saved normalized file: normalized_outputs/jades_goodsn_ra_dec_z (9)__normalized.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Merge + Normalize _STANDARDIZED catalogs (JWST/HSC/GZ1) ===\n",
        "# Upload 1..N files (CSV/XLSX/ZIP of either), we will auto-extract sheets/tables that have ra/dec/spin.\n",
        "# Outputs:\n",
        "#   normalized_outputs/<basename>__normalized.csv  (ra_deg, dec_deg, spin, [z], weight, source)\n",
        "#   normalized_outputs/merged_all_standardized.csv\n",
        "\n",
        "MIN_PROB_GAP = 0.00  # set to e.g. 0.10 to require |p_cw - p_ccw| >= 0.10 to keep a spin\n",
        "DEFAULT_WEIGHT = 1.0\n",
        "\n",
        "import io, os, re, zipfile, numpy as np, pandas as pd\n",
        "\n",
        "def _pip(pkg):\n",
        "    import subprocess, sys\n",
        "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg, \"--quiet\"])\n",
        "\n",
        "from google.colab import files as colab_files\n",
        "\n",
        "def sniff_read(buff, explicit_sep=None):\n",
        "    try:\n",
        "        return pd.read_csv(buff, sep=explicit_sep, engine=\"python\", comment=\"#\", na_values=[\"\", \"NaN\",\"nan\"])\n",
        "    except Exception:\n",
        "        return pd.read_csv(buff, sep=None, engine=\"python\", comment=\"#\", na_values=[\"\", \"NaN\",\"nan\"])\n",
        "\n",
        "def read_any_upload(name, data):\n",
        "    low = name.lower()\n",
        "    if low.endswith(\".zip\"):\n",
        "        with zipfile.ZipFile(io.BytesIO(data)) as z:\n",
        "            inner = [n for n in z.namelist() if n.lower().endswith((\".csv\",\".tsv\",\".txt\",\".xlsx\"))]\n",
        "            if not inner:\n",
        "                raise ValueError(\"Zip has no supported csv/tsv/xlsx files.\")\n",
        "            out = []\n",
        "            for n in inner:\n",
        "                with z.open(n) as f:\n",
        "                    b = f.read()\n",
        "                out.append((n, b))\n",
        "            return out  # list of (innername, bytes)\n",
        "    return [(name, data)]\n",
        "\n",
        "def read_table(name, data):\n",
        "    low = name.lower()\n",
        "    if low.endswith((\".csv\",\".tsv\",\".txt\")):\n",
        "        sep = \"\\t\" if low.endswith(\".tsv\") else None\n",
        "        return sniff_read(io.BytesIO(data), explicit_sep=sep), f\"{name}\"\n",
        "    if low.endswith(\".xlsx\"):\n",
        "        try: import openpyxl  # noqa\n",
        "        except Exception: _pip(\"openpyxl\")\n",
        "        xl = pd.ExcelFile(io.BytesIO(data))\n",
        "        tables = []\n",
        "        for s in xl.sheet_names:\n",
        "            try:\n",
        "                df = xl.parse(s)\n",
        "                tables.append((f\"{name}::{s}\", df))\n",
        "            except Exception:\n",
        "                pass\n",
        "        return tables, None  # signal multiple tables\n",
        "    raise ValueError(f\"Unsupported file: {name}\")\n",
        "\n",
        "RA_CANDS  = [\"ra\",\"RA\",\"ra_deg\",\"RA_deg\",\"RAJ2000\",\"RA_TARG\",\"ALPHA_J2000\",\"RightAscension\"]\n",
        "DEC_CANDS = [\"dec\",\"DEC\",\"dec_deg\",\"Dec_deg\",\"DEJ2000\",\"Dec_TARG\",\"DELTA_J2000\",\"Declination\"]\n",
        "\n",
        "def pick(df, cands):\n",
        "    for c in df.columns:\n",
        "        if c in cands or c.lower() in [x.lower() for x in cands]:\n",
        "            return c\n",
        "    return None\n",
        "\n",
        "def sexa_to_deg(val, is_ra):\n",
        "    if pd.isna(val): return np.nan\n",
        "    if isinstance(val, (int,float,np.floating)): return float(val)\n",
        "    s=str(val).strip()\n",
        "    m=re.match(r\"^\\s*([+-]?\\d+):(\\d+):([\\d\\.]+)\\s*$\", s)\n",
        "    if m:\n",
        "        sign = -1.0 if s.startswith(\"-\") else 1.0\n",
        "        d=abs(float(m.group(1))); mi=float(m.group(2)); sec=float(m.group(3))\n",
        "        v = d + mi/60.0 + sec/3600.0\n",
        "        return (v*15.0) if is_ra else sign*v\n",
        "    try: return float(s)\n",
        "    except: return np.nan\n",
        "\n",
        "def coerce_ra_dec(df, ra_col, dec_col):\n",
        "    ra, dec = df[ra_col], df[dec_col]\n",
        "    if ra.dtype.kind in \"iufc\" and dec.dtype.kind in \"iufc\":\n",
        "        return pd.to_numeric(ra, errors=\"coerce\"), pd.to_numeric(dec, errors=\"coerce\")\n",
        "    return ra.apply(lambda x: sexa_to_deg(x, True)), dec.apply(lambda x: sexa_to_deg(x, False))\n",
        "\n",
        "def detect_spin_series(df):\n",
        "    lc = {c.lower(): c for c in df.columns}\n",
        "    # direct spin\n",
        "    if \"spin\" in lc:\n",
        "        s = pd.to_numeric(df[lc[\"spin\"]], errors=\"coerce\")\n",
        "        if set(pd.unique(s.dropna())) <= {0,1}: s = s.replace({0:-1,1:+1})\n",
        "        return s\n",
        "    # string spin-like\n",
        "    for name in [\"handedness\",\"cw_ccw\",\"chirality\",\"class\",\"label\"]:\n",
        "        if name in lc:\n",
        "            t = df[lc[name]].astype(str).str.lower().str.strip()\n",
        "            return t.map({\"cw\":+1,\"clockwise\":+1,\"right\":+1,\"acw\":-1,\"ccw\":-1,\"counterclockwise\":-1,\"left\":-1})\n",
        "    # probs\n",
        "    pcw = lc.get(\"p_cw\") or lc.get(\"prob_cw\"); pacw = lc.get(\"p_ccw\") or lc.get(\"p_acw\") or lc.get(\"prob_acw\")\n",
        "    if pcw and pacw:\n",
        "        pcw_v  = pd.to_numeric(df[pcw],  errors=\"coerce\")\n",
        "        pacw_v = pd.to_numeric(df[pacw], errors=\"coerce\")\n",
        "        gap = (pcw_v - pacw_v).abs()\n",
        "        s = np.sign(pcw_v - pacw_v).replace(0, np.nan)\n",
        "        if MIN_PROB_GAP > 0:\n",
        "            s = s.where(gap >= MIN_PROB_GAP, np.nan)\n",
        "        return s\n",
        "    return None\n",
        "\n",
        "def normalize_one(df, source_tag):\n",
        "    ra_c = pick(df, RA_CANDS); dec_c = pick(df, DEC_CANDS)\n",
        "    if not ra_c or not dec_c:\n",
        "        return None, f\"[SKIP] {source_tag}: no RA/Dec columns.\"\n",
        "    ra_deg, dec_deg = coerce_ra_dec(df, ra_c, dec_c)\n",
        "    spin = detect_spin_series(df)\n",
        "    if spin is None or spin.notna().sum()==0:\n",
        "        return None, f\"[SKIP] {source_tag}: no usable spin column.\"\n",
        "    out = pd.DataFrame({\n",
        "        \"ra_deg\": ra_deg,\n",
        "        \"dec_deg\": dec_deg,\n",
        "        \"spin\": pd.to_numeric(spin, errors=\"coerce\")\n",
        "    })\n",
        "    # optional z\n",
        "    z_c = next((c for c in df.columns if c.lower() in [\"z\",\"z_spec\",\"zspec\",\"z_phot\",\"zphot\",\"redshift\",\"z_spec\",\"z_spec\"]), None)\n",
        "    if z_c: out[\"z\"] = pd.to_numeric(df[z_c], errors=\"coerce\")\n",
        "    out[\"weight\"] = DEFAULT_WEIGHT\n",
        "    out[\"source\"] = source_tag\n",
        "    out = out.dropna(subset=[\"ra_deg\",\"dec_deg\",\"spin\"])\n",
        "    out[\"ra_deg\"] = np.mod(out[\"ra_deg\"], 360.0)\n",
        "    out[\"dec_deg\"] = out[\"dec_deg\"].clip(-90,90)\n",
        "    return out, f\"[OK] {source_tag}: rows={len(out)} (kept)\"\n",
        "\n",
        "# ---- Run upload & process ----\n",
        "print(\"Upload your _STANDARDIZED files (CSV/XLSX or a ZIP of them). You can select multiple.\")\n",
        "ups = colab_files.upload()\n",
        "outputs = []\n",
        "logs = []\n",
        "\n",
        "os.makedirs(\"normalized_outputs\", exist_ok=True)\n",
        "\n",
        "for name, data in ups.items():\n",
        "    try:\n",
        "        parts = read_any_upload(name, data)  # list of (subname, bytes)\n",
        "        for subname, subdata in parts:\n",
        "            tbl, multi = read_table(subname, subdata)\n",
        "            if multi is None:\n",
        "                # single table\n",
        "                out, msg = normalize_one(tbl, subname)\n",
        "                logs.append(msg)\n",
        "                if out is not None and len(out):\n",
        "                    base = os.path.splitext(os.path.basename(subname))[0]\n",
        "                    path = os.path.join(\"normalized_outputs\", f\"{base}__normalized.csv\")\n",
        "                    out.to_csv(path, index=False)\n",
        "                    outputs.append(out)\n",
        "            else:\n",
        "                # multiple tables (XLSX with sheets)\n",
        "                for tag, df in tbl:\n",
        "                    out, msg = normalize_one(df, tag)\n",
        "                    logs.append(msg)\n",
        "                    if out is not None and len(out):\n",
        "                        base = os.path.splitext(os.path.basename(tag.replace(\"::\",\"__\")))[0]\n",
        "                        path = os.path.join(\"normalized_outputs\", f\"{base}__normalized.csv\")\n",
        "                        out.to_csv(path, index=False)\n",
        "                        outputs.append(out)\n",
        "    except Exception as e:\n",
        "        logs.append(f\"[ERR] {name}: {e}\")\n",
        "\n",
        "print(\"\\n\".join(logs) or \"(no logs)\")\n",
        "\n",
        "if outputs:\n",
        "    merged = pd.concat(outputs, ignore_index=True)\n",
        "    merged.to_csv(\"normalized_outputs/merged_all_standardized.csv\", index=False)\n",
        "    print(\"\\nWrote merged_all_standardized.csv with\", len(merged), \"rows.\")\n",
        "else:\n",
        "    print(\"\\nNo usable tables found (need RA/Dec and a detectable spin column).\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "ZLpSF_LqQhtN",
        "outputId": "4edf64b6-b6f2-4ba3-9114-8a5321733a7a"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Upload your _STANDARDIZED files (CSV/XLSX or a ZIP of them). You can select multiple.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a5c32976-a290-4062-b30d-af3c0facf95e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a5c32976-a290-4062-b30d-af3c0facf95e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1).xlsx to master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1).xlsx\n",
            "Saving HSC_STANDARDIZED copy (1).xlsx to HSC_STANDARDIZED copy (1) (1).xlsx\n",
            "Saving GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED.xlsx to GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED.xlsx\n",
            "[ERR] master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1).xlsx: 'list' object has no attribute 'columns'\n",
            "[ERR] HSC_STANDARDIZED copy (1) (1).xlsx: 'list' object has no attribute 'columns'\n",
            "[ERR] GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED.xlsx: 'list' object has no attribute 'columns'\n",
            "\n",
            "No usable tables found (need RA/Dec and a detectable spin column).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Merge + Normalize _STANDARDIZED catalogs (JWST/HSC/GZ1) — v2.1 (multi-sheet fix) ===\n",
        "MIN_PROB_GAP = 0.00  # e.g. 0.10 keeps only |p_cw - p_ccw| >= 0.10\n",
        "DEFAULT_WEIGHT = 1.0\n",
        "\n",
        "import io, os, re, zipfile, numpy as np, pandas as pd\n",
        "from google.colab import files as colab_files\n",
        "\n",
        "def _pip(pkg):\n",
        "    import subprocess, sys\n",
        "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg, \"--quiet\"])\n",
        "\n",
        "def sniff_read(buff, explicit_sep=None):\n",
        "    try:\n",
        "        return pd.read_csv(buff, sep=explicit_sep, engine=\"python\", comment=\"#\", na_values=[\"\", \"NaN\",\"nan\"])\n",
        "    except Exception:\n",
        "        return pd.read_csv(buff, sep=None, engine=\"python\", comment=\"#\", na_values=[\"\", \"NaN\",\"nan\"])\n",
        "\n",
        "def read_any_upload(name, data):\n",
        "    low = name.lower()\n",
        "    if low.endswith(\".zip\"):\n",
        "        with zipfile.ZipFile(io.BytesIO(data)) as z:\n",
        "            inner = [n for n in z.namelist() if n.lower().endswith((\".csv\",\".tsv\",\".txt\",\".xlsx\"))]\n",
        "            if not inner:\n",
        "                raise ValueError(\"Zip has no supported csv/tsv/xlsx files.\")\n",
        "            return [(n, z.read(n)) for n in inner]\n",
        "    return [(name, data)]\n",
        "\n",
        "def read_table(name, data):\n",
        "    low = name.lower()\n",
        "    if low.endswith((\".csv\",\".tsv\",\".txt\")):\n",
        "        sep = \"\\t\" if low.endswith(\".tsv\") else None\n",
        "        return sniff_read(io.BytesIO(data), explicit_sep=sep), False  # single table\n",
        "    if low.endswith(\".xlsx\"):\n",
        "        try: import openpyxl  # noqa\n",
        "        except Exception: _pip(\"openpyxl\")\n",
        "        xl = pd.ExcelFile(io.BytesIO(data))\n",
        "        tables = []\n",
        "        for s in xl.sheet_names:\n",
        "            try:\n",
        "                df = xl.parse(s)\n",
        "                tables.append((f\"{name}::{s}\", df))\n",
        "            except Exception:\n",
        "                pass\n",
        "        return tables, True  # multiple tables\n",
        "    raise ValueError(f\"Unsupported file: {name}\")\n",
        "\n",
        "RA_CANDS  = [\"ra\",\"RA\",\"ra_deg\",\"RA_deg\",\"RAJ2000\",\"RA_TARG\",\"ALPHA_J2000\",\"RightAscension\"]\n",
        "DEC_CANDS = [\"dec\",\"DEC\",\"dec_deg\",\"Dec_deg\",\"DEJ2000\",\"Dec_TARG\",\"DELTA_J2000\",\"Declination\"]\n",
        "\n",
        "def pick(df, cands):\n",
        "    for c in df.columns:\n",
        "        if c in cands or c.lower() in [x.lower() for x in cands]:\n",
        "            return c\n",
        "    return None\n",
        "\n",
        "def sexa_to_deg(val, is_ra):\n",
        "    if pd.isna(val): return np.nan\n",
        "    if isinstance(val, (int,float,np.floating)): return float(val)\n",
        "    s=str(val).strip()\n",
        "    m=re.match(r\"^\\s*([+-]?\\d+):(\\d+):([\\d\\.]+)\\s*$\", s)\n",
        "    if m:\n",
        "        sign = -1.0 if s.startswith(\"-\") else 1.0\n",
        "        d=abs(float(m.group(1))); mi=float(m.group(2)); sec=float(m.group(3))\n",
        "        v = d + mi/60.0 + sec/3600.0\n",
        "        return (v*15.0) if is_ra else sign*v\n",
        "    try: return float(s)\n",
        "    except: return np.nan\n",
        "\n",
        "def coerce_ra_dec(df, ra_col, dec_col):\n",
        "    ra, dec = df[ra_col], df[dec_col]\n",
        "    if ra.dtype.kind in \"iufc\" and dec.dtype.kind in \"iufc\":\n",
        "        return pd.to_numeric(ra, errors=\"coerce\"), pd.to_numeric(dec, errors=\"coerce\")\n",
        "    return ra.apply(lambda x: sexa_to_deg(x, True)), dec.apply(lambda x: sexa_to_deg(x, False))\n",
        "\n",
        "def detect_spin_series(df):\n",
        "    lc = {c.lower(): c for c in df.columns}\n",
        "    if \"spin\" in lc:\n",
        "        s = pd.to_numeric(df[lc[\"spin\"]], errors=\"coerce\")\n",
        "        if set(pd.unique(s.dropna())) <= {0,1}: s = s.replace({0:-1,1:+1})\n",
        "        return s\n",
        "    for name in [\"handedness\",\"cw_ccw\",\"chirality\",\"class\",\"label\"]:\n",
        "        if name in lc:\n",
        "            t = df[lc[name]].astype(str).str.lower().str.strip()\n",
        "            return t.map({\"cw\":+1,\"clockwise\":+1,\"right\":+1,\"acw\":-1,\"ccw\":-1,\"counterclockwise\":-1,\"left\":-1})\n",
        "    pcw = lc.get(\"p_cw\") or lc.get(\"prob_cw\"); pacw = lc.get(\"p_ccw\") or lc.get(\"p_acw\") or lc.get(\"prob_acw\")\n",
        "    if pcw and pacw:\n",
        "        pcw_v  = pd.to_numeric(df[pcw],  errors=\"coerce\")\n",
        "        pacw_v = pd.to_numeric(df[pacw], errors=\"coerce\")\n",
        "        gap = (pcw_v - pacw_v).abs()\n",
        "        s = np.sign(pcw_v - pacw_v).replace(0, np.nan)\n",
        "        if MIN_PROB_GAP > 0:\n",
        "            s = s.where(gap >= MIN_PROB_GAP, np.nan)\n",
        "        return s\n",
        "    return None\n",
        "\n",
        "def normalize_one(df, source_tag):\n",
        "    if df is None or len(df)==0:\n",
        "        return None, f\"[SKIP] {source_tag}: empty sheet/table.\"\n",
        "    ra_c = pick(df, RA_CANDS); dec_c = pick(df, DEC_CANDS)\n",
        "    if not ra_c or not dec_c:\n",
        "        return None, f\"[SKIP] {source_tag}: no RA/Dec columns.\"\n",
        "    spin = detect_spin_series(df)\n",
        "    if spin is None or spin.notna().sum()==0:\n",
        "        return None, f\"[SKIP] {source_tag}: no usable spin column.\"\n",
        "    ra_deg, dec_deg = coerce_ra_dec(df, ra_c, dec_c)\n",
        "    out = pd.DataFrame({\n",
        "        \"ra_deg\": ra_deg,\n",
        "        \"dec_deg\": dec_deg,\n",
        "        \"spin\": pd.to_numeric(spin, errors=\"coerce\")\n",
        "    })\n",
        "    z_c = next((c for c in df.columns if c.lower() in [\"z\",\"z_spec\",\"zspec\",\"z_phot\",\"zphot\",\"redshift\"]), None)\n",
        "    if z_c: out[\"z\"] = pd.to_numeric(df[z_c], errors=\"coerce\")\n",
        "    out[\"weight\"] = DEFAULT_WEIGHT\n",
        "    out[\"source\"] = source_tag\n",
        "    out = out.dropna(subset=[\"ra_deg\",\"dec_deg\",\"spin\"])\n",
        "    out[\"ra_deg\"] = np.mod(out[\"ra_deg\"], 360.0)\n",
        "    out[\"dec_deg\"] = out[\"dec_deg\"].clip(-90,90)\n",
        "    return out, f\"[OK] {source_tag}: kept {len(out)} rows.\"\n",
        "\n",
        "# ---------- run ----------\n",
        "print(\"Upload your _STANDARDIZED files (CSV/XLSX or a ZIP of them). You can select multiple.\")\n",
        "ups = colab_files.upload()\n",
        "logs, outputs = [], []\n",
        "\n",
        "os.makedirs(\"normalized_outputs\", exist_ok=True)\n",
        "\n",
        "for name, data in ups.items():\n",
        "    try:\n",
        "        parts = read_any_upload(name, data)  # list of (subname, bytes)\n",
        "        for subname, subdata in parts:\n",
        "            tbl, is_multi = read_table(subname, subdata)\n",
        "            if not is_multi:\n",
        "                df = tbl\n",
        "                out, msg = normalize_one(df, subname)\n",
        "                logs.append(msg)\n",
        "                if out is not None and len(out):\n",
        "                    base = os.path.splitext(os.path.basename(subname))[0]\n",
        "                    out.to_csv(f\"normalized_outputs/{base}__normalized.csv\", index=False)\n",
        "                    outputs.append(out)\n",
        "            else:\n",
        "                for tag, df in tbl:  # iterate sheets\n",
        "                    out, msg = normalize_one(df, tag)\n",
        "                    logs.append(msg)\n",
        "                    if out is not None and len(out):\n",
        "                        base = os.path.splitext(os.path.basename(tag.replace('::','__')))[0]\n",
        "                        out.to_csv(f\"normalized_outputs/{base}__normalized.csv\", index=False)\n",
        "                        outputs.append(out)\n",
        "    except Exception as e:\n",
        "        logs.append(f\"[ERR] {name}: {e}\")\n",
        "\n",
        "print(\"\\n\".join(logs) or \"(no logs)\")\n",
        "\n",
        "if outputs:\n",
        "    merged = pd.concat(outputs, ignore_index=True)\n",
        "    merged.to_csv(\"normalized_outputs/merged_all_standardized.csv\", index=False)\n",
        "    print(\"\\nWrote merged_all_standardized.csv with\", len(merged), \"rows.\")\n",
        "else:\n",
        "    print(\"\\nNo usable tables found (need RA/Dec and a detectable spin column).\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "PbSapF5bRY4c",
        "outputId": "50ae184b-a3f7-49b7-8a94-4ab5fbd259ab"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Upload your _STANDARDIZED files (CSV/XLSX or a ZIP of them). You can select multiple.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-2f19e9f3-0a64-4322-aea7-ab17097f49fd\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-2f19e9f3-0a64-4322-aea7-ab17097f49fd\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1).xlsx to master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1) (1).xlsx\n",
            "Saving HSC_STANDARDIZED copy (1).xlsx to HSC_STANDARDIZED copy (1) (2).xlsx\n",
            "Saving GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED.xlsx to GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED (1).xlsx\n",
            "[OK] master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1) (1).xlsx::in: kept 4 rows.\n",
            "[OK] HSC_STANDARDIZED copy (1) (2).xlsx::in: kept 13476 rows.\n",
            "[OK] GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED (1).xlsx::in: kept 667944 rows.\n",
            "\n",
            "Wrote merged_all_standardized.csv with 681424 rows.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Mechanism-1 Alignment (auto-ingest merged_all_standardized.csv) ===\n",
        "# Looks for: normalized_outputs/merged_all_standardized.csv\n",
        "# Accepts either a dphi npy (1D) or scalar npy (2D/HP map) for the Logosfield map.\n",
        "# Saves summary CSV/JSON to ./alignment_outputs/\n",
        "\n",
        "import os, math, json, numpy as np, pandas as pd\n",
        "\n",
        "def _pip(pkg):\n",
        "    import subprocess, sys\n",
        "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg, \"--quiet\"])\n",
        "\n",
        "try:\n",
        "    import healpy as hp\n",
        "except Exception:\n",
        "    _pip(\"healpy\"); import healpy as hp\n",
        "\n",
        "# ---- settings you can tweak ----\n",
        "INCLUSIVE_MODE        = True   # if True, pred==0 counts as aligned\n",
        "COUNT_ZERO_AS_ALIGNED = True\n",
        "DELTA_FACTOR          = 1.5    # finite-diff step factor if scalar map used\n",
        "MIN_MARGIN_ABS        = 0.0    # treat |grad| < this as zero\n",
        "OUTDIR                = \"alignment_outputs\"\n",
        "os.makedirs(OUTDIR, exist_ok=True)\n",
        "\n",
        "# ---- utils ----\n",
        "def ensure_nside(arr):\n",
        "    n=arr.size; nside=hp.npix2nside(n)\n",
        "    if 12*nside*nside!=n: raise ValueError(\"Invalid HEALPix length\")\n",
        "    return nside\n",
        "\n",
        "def dphi_from_scalar(scalar_map, ra_deg, dec_deg):\n",
        "    nside=ensure_nside(scalar_map); pix_size=hp.nside2resol(nside)\n",
        "    theta=np.radians(90.0-dec_deg); phi=np.radians(ra_deg)\n",
        "    step=DELTA_FACTOR*pix_size\n",
        "    Lp=hp.get_interp_val(scalar_map, theta, phi+step); Lm=hp.get_interp_val(scalar_map, theta, phi-step)\n",
        "    return (Lp-Lm)/(2*step), nside\n",
        "\n",
        "def predict_spin(map_kind, dphi_map, scalar_map, ra_deg, dec_deg):\n",
        "    if map_kind==\"dphi\":\n",
        "        nside=ensure_nside(dphi_map)\n",
        "        theta=np.radians(90.0-dec_deg); phi=np.radians(ra_deg)\n",
        "        pix=hp.ang2pix(nside, theta, phi, nest=False)\n",
        "        vals=dphi_map[pix].astype(float)\n",
        "        zero=np.abs(vals)<max(1e-12, MIN_MARGIN_ABS)\n",
        "        pred=np.sign(vals); pred[zero]=0.0\n",
        "        return pred, zero, nside\n",
        "    else:\n",
        "        dvals,nside=dphi_from_scalar(scalar_map, ra_deg, dec_deg)\n",
        "        zero=np.abs(dvals)<max(1e-12, MIN_MARGIN_ABS)\n",
        "        pred=np.sign(dvals); pred[zero]=0.0\n",
        "        return pred, zero, nside\n",
        "\n",
        "def wilson_ci(k, n, z=1.96):\n",
        "    if n<=0: return (np.nan, np.nan)\n",
        "    p = k/n; denom = 1 + z**2/n\n",
        "    center = (p + z*z/(2*n)) / denom\n",
        "    half   = z * math.sqrt((p*(1-p)/n) + (z*z/(4*n*n))) / denom\n",
        "    return (max(0.0, center-half), min(1.0, center+half))\n",
        "\n",
        "# ---- load merged catalog (auto) or ask for upload if missing ----\n",
        "merged_path = \"normalized_outputs/merged_all_standardized.csv\"\n",
        "if not os.path.exists(merged_path):\n",
        "    from google.colab import files as colab_files\n",
        "    print(\"merged_all_standardized.csv not found. Upload a normalized CSV to proceed.\")\n",
        "    up = colab_files.upload()\n",
        "    merged_path = list(up.keys())[0]\n",
        "\n",
        "df = pd.read_csv(merged_path)\n",
        "need = {\"ra_deg\",\"dec_deg\",\"spin\"}\n",
        "if not need.issubset(set(df.columns)):\n",
        "    raise SystemExit(f\"CSV must contain {need}, found {set(df.columns)}\")\n",
        "\n",
        "# Clean & prepare\n",
        "df = df.copy()\n",
        "df[\"ra_deg\"]  = np.mod(pd.to_numeric(df[\"ra_deg\"], errors=\"coerce\"), 360.0)\n",
        "df[\"dec_deg\"] = pd.to_numeric(df[\"dec_deg\"], errors=\"coerce\").clip(-90,90)\n",
        "df[\"spin\"]    = pd.to_numeric(df[\"spin\"], errors=\"coerce\")\n",
        "df[\"weight\"]  = pd.to_numeric(df.get(\"weight\", 1.0), errors=\"coerce\").fillna(1.0)\n",
        "\n",
        "df = df.dropna(subset=[\"ra_deg\",\"dec_deg\",\"spin\",\"weight\"])\n",
        "print(f\"Loaded {len(df)} rows from {merged_path}\")\n",
        "\n",
        "# ---- load Logosfield map ----\n",
        "from google.colab import files as colab_files\n",
        "print(\"Upload your Logosfield map (.npy) — dphi preferred, scalar fallback.\")\n",
        "up = colab_files.upload()\n",
        "map_name = list(up.keys())[0]\n",
        "arr = np.load(map_name, allow_pickle=False)\n",
        "if arr.ndim==1:\n",
        "    dphi_map, scalar_map, map_kind = np.asarray(arr,float), None, \"dphi\"\n",
        "else:\n",
        "    dphi_map, scalar_map, map_kind = None, np.asarray(arr,float), \"scalar\"\n",
        "print(f\"Loaded {map_kind} map: {map_name}\")\n",
        "\n",
        "# ---- compute alignment (overall + by source if provided) ----\n",
        "def align_one(sub, tag):\n",
        "    ra=sub[\"ra_deg\"].values; dec=sub[\"dec_deg\"].values\n",
        "    spin=sub[\"spin\"].values.astype(float); w=sub[\"weight\"].values.astype(float)\n",
        "    pred, zero, nside = predict_spin(map_kind, dphi_map, scalar_map, ra, dec)\n",
        "    m = (~np.isnan(pred)) & (~np.isnan(spin)) & (~np.isnan(w))\n",
        "    if not INCLUSIVE_MODE: m = m & (pred!=0.0)\n",
        "    used_pred=pred[m]; used_spin=spin[m]; used_w=w[m]\n",
        "    if COUNT_ZERO_AS_ALIGNED:\n",
        "        aligned = ((used_pred==0.0)|(np.sign(used_pred)==np.sign(used_spin))).astype(float)\n",
        "    else:\n",
        "        aligned = (np.sign(used_pred)==np.sign(used_spin)).astype(float)\n",
        "    k = float(np.sum(aligned*used_w))\n",
        "    n = float(np.sum(used_w))\n",
        "    frac = (k/n) if n>0 else np.nan\n",
        "    lo, hi = wilson_ci(k, n)\n",
        "    return {\n",
        "        \"tag\": tag, \"nside\": int(ensure_nside(dphi_map if map_kind=='dphi' else scalar_map)),\n",
        "        \"N_rows\": int(len(sub)), \"N_used_eff\": n,\n",
        "        \"fraction_aligned\": frac, \"ci95_lo\": lo, \"ci95_hi\": hi\n",
        "    }\n",
        "\n",
        "summ = []\n",
        "# overall\n",
        "summ.append(align_one(df, \"ALL\"))\n",
        "\n",
        "# by source (if column present)\n",
        "if \"source\" in df.columns:\n",
        "    for src, sub in df.groupby(\"source\", dropna=False):\n",
        "        summ.append(align_one(sub, f\"source={src}\"))\n",
        "\n",
        "summ_df = pd.DataFrame(summ)\n",
        "print(\"\\n== Alignment Summary ==\")\n",
        "print(summ_df.to_string(index=False))\n",
        "\n",
        "# save\n",
        "import time\n",
        "ts=time.strftime(\"%Y%m%dT%H%M%SZ\", time.gmtime())\n",
        "out_csv  = os.path.join(OUTDIR, f\"alignment_summary_{ts}.csv\")\n",
        "out_json = os.path.join(OUTDIR, f\"alignment_summary_{ts}.json\")\n",
        "summ_df.to_csv(out_csv, index=False)\n",
        "with open(out_json, \"w\") as f: json.dump(summ, f, indent=2)\n",
        "\n",
        "print(f\"\\nSaved:\\n  {out_csv}\\n  {out_json}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "lPrgxYYSSm9K",
        "outputId": "bcb8b96b-ee55-4237-ca62-e436d11055cd"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 681424 rows from normalized_outputs/merged_all_standardized.csv\n",
            "Upload your Logosfield map (.npy) — dphi preferred, scalar fallback.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e64e8186-1755-45f5-a223-200b9a5a6031\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-e64e8186-1755-45f5-a223-200b9a5a6031\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Logosfield_dphi_map.npy to Logosfield_dphi_map (6).npy\n",
            "Loaded dphi map: Logosfield_dphi_map (6).npy\n",
            "\n",
            "== Alignment Summary ==\n",
            "                                                                          tag  nside  N_rows  N_used_eff  fraction_aligned  ci95_lo  ci95_hi\n",
            "                                                                          ALL    128  681424    681424.0          0.504943 0.503755 0.506130\n",
            "         source=GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED (1).xlsx::in    128  667944    667944.0          0.505104 0.503905 0.506303\n",
            "                                source=HSC_STANDARDIZED copy (1) (2).xlsx::in    128   13476     13476.0          0.497106 0.488666 0.505547\n",
            "source=master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1) (1).xlsx::in    128       4         4.0          0.000000 0.000000 0.489900\n",
            "\n",
            "Saved:\n",
            "  alignment_outputs/alignment_summary_20250902T023831Z.csv\n",
            "  alignment_outputs/alignment_summary_20250902T023831Z.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Mechanism-1 Alignment with Redshift Bins (extends the auto-ingest runner) ===\n",
        "# Reads normalized_outputs/merged_all_standardized.csv (or lets you upload),\n",
        "# asks for the Logosfield map (.npy), computes alignment:\n",
        "#   • overall\n",
        "#   • by source (catalog)\n",
        "#   • by redshift bins (global)\n",
        "#   • by (source × redshift bin)\n",
        "#\n",
        "# Writes tidy CSVs/JSON to ./alignment_outputs/.\n",
        "\n",
        "import os, math, json, numpy as np, pandas as pd\n",
        "\n",
        "# -------- settings you can tweak --------\n",
        "INCLUSIVE_MODE        = True   # if True, pred==0 counts as aligned\n",
        "COUNT_ZERO_AS_ALIGNED = True\n",
        "DELTA_FACTOR          = 1.5    # finite-diff step factor if scalar map used\n",
        "MIN_MARGIN_ABS        = 0.0    # treat |grad| < this as zero\n",
        "Z_BINS                = [0, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0]  # change as desired\n",
        "OUTDIR                = \"alignment_outputs\"\n",
        "os.makedirs(OUTDIR, exist_ok=True)\n",
        "\n",
        "# -------- deps --------\n",
        "def _pip(pkg):\n",
        "    import subprocess, sys\n",
        "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg, \"--quiet\"])\n",
        "\n",
        "try:\n",
        "    import healpy as hp\n",
        "except Exception:\n",
        "    _pip(\"healpy\"); import healpy as hp\n",
        "\n",
        "# -------- utilities --------\n",
        "def ensure_nside(arr):\n",
        "    n=arr.size; nside=hp.npix2nside(n)\n",
        "    if 12*nside*nside!=n: raise ValueError(\"Invalid HEALPix length\")\n",
        "    return nside\n",
        "\n",
        "def dphi_from_scalar(scalar_map, ra_deg, dec_deg):\n",
        "    nside=ensure_nside(scalar_map); pix_size=hp.nside2resol(nside)\n",
        "    theta=np.radians(90.0-dec_deg); phi=np.radians(ra_deg)\n",
        "    step=DELTA_FACTOR*pix_size\n",
        "    Lp=hp.get_interp_val(scalar_map, theta, phi+step); Lm=hp.get_interp_val(scalar_map, theta, phi-step)\n",
        "    return (Lp-Lm)/(2*step), nside\n",
        "\n",
        "def predict_spin(map_kind, dphi_map, scalar_map, ra_deg, dec_deg):\n",
        "    if map_kind==\"dphi\":\n",
        "        nside=ensure_nside(dphi_map)\n",
        "        theta=np.radians(90.0-dec_deg); phi=np.radians(ra_deg)\n",
        "        pix=hp.ang2pix(nside, theta, phi, nest=False)\n",
        "        vals=dphi_map[pix].astype(float)\n",
        "        zero=np.abs(vals)<max(1e-12, MIN_MARGIN_ABS)\n",
        "        pred=np.sign(vals); pred[zero]=0.0\n",
        "        return pred, zero, nside\n",
        "    else:\n",
        "        dvals,nside=dphi_from_scalar(scalar_map, ra_deg, dec_deg)\n",
        "        zero=np.abs(dvals)<max(1e-12, MIN_MARGIN_ABS)\n",
        "        pred=np.sign(dvals); pred[zero]=0.0\n",
        "        return pred, zero, nside\n",
        "\n",
        "def wilson_ci(k, n, z=1.96):\n",
        "    if n<=0: return (np.nan, np.nan)\n",
        "    p = k/n; denom = 1 + z**2/n\n",
        "    center = (p + z*z/(2*n)) / denom\n",
        "    half   = z * math.sqrt((p*(1-p)/n) + (z*z/(4*n*n))) / denom\n",
        "    return (max(0.0, center-half), min(1.0, center+half))\n",
        "\n",
        "def align_df(sub, map_kind, dphi_map, scalar_map, tag):\n",
        "    ra=sub[\"ra_deg\"].values; dec=sub[\"dec_deg\"].values\n",
        "    spin=sub[\"spin\"].values.astype(float); w=sub[\"weight\"].values.astype(float)\n",
        "    pred, zero, nside = predict_spin(map_kind, dphi_map, scalar_map, ra, dec)\n",
        "    m = (~np.isnan(pred)) & (~np.isnan(spin)) & (~np.isnan(w))\n",
        "    if not INCLUSIVE_MODE: m = m & (pred!=0.0)\n",
        "    used_pred=pred[m]; used_spin=spin[m]; used_w=w[m]\n",
        "    if COUNT_ZERO_AS_ALIGNED:\n",
        "        aligned = ((used_pred==0.0)|(np.sign(used_pred)==np.sign(used_spin))).astype(float)\n",
        "    else:\n",
        "        aligned = (np.sign(used_pred)==np.sign(used_spin)).astype(float)\n",
        "    k = float(np.sum(aligned*used_w))\n",
        "    n = float(np.sum(used_w))\n",
        "    frac = (k/n) if n>0 else np.nan\n",
        "    lo, hi = wilson_ci(k, n)\n",
        "    return {\"tag\": tag, \"nside\": int(ensure_nside(dphi_map if map_kind=='dphi' else scalar_map)),\n",
        "            \"N_rows\": int(len(sub)), \"N_used_eff\": n, \"k_aligned_eff\": k,\n",
        "            \"fraction_aligned\": frac, \"ci95_lo\": lo, \"ci95_hi\": hi}\n",
        "\n",
        "# -------- load merged catalog (or upload) --------\n",
        "merged_path = \"normalized_outputs/merged_all_standardized.csv\"\n",
        "if not os.path.exists(merged_path):\n",
        "    from google.colab import files as colab_files\n",
        "    print(\"merged_all_standardized.csv not found. Upload a normalized CSV to proceed.\")\n",
        "    up = colab_files.upload()\n",
        "    merged_path = list(up.keys())[0]\n",
        "\n",
        "df = pd.read_csv(merged_path)\n",
        "need = {\"ra_deg\",\"dec_deg\",\"spin\"}\n",
        "if not need.issubset(df.columns):\n",
        "    raise SystemExit(f\"CSV must contain {need}, found {set(df.columns)}\")\n",
        "\n",
        "# Clean\n",
        "df = df.copy()\n",
        "df[\"ra_deg\"]  = np.mod(pd.to_numeric(df[\"ra_deg\"], errors=\"coerce\"), 360.0)\n",
        "df[\"dec_deg\"] = pd.to_numeric(df[\"dec_deg\"], errors=\"coerce\").clip(-90,90)\n",
        "df[\"spin\"]    = pd.to_numeric(df[\"spin\"], errors=\"coerce\")\n",
        "df[\"weight\"]  = pd.to_numeric(df.get(\"weight\", 1.0), errors=\"coerce\").fillna(1.0)\n",
        "if \"z\" in df.columns:\n",
        "    df[\"z\"] = pd.to_numeric(df[\"z\"], errors=\"coerce\")\n",
        "df = df.dropna(subset=[\"ra_deg\",\"dec_deg\",\"spin\",\"weight\"])\n",
        "\n",
        "print(f\"Loaded {len(df)} rows.\")\n",
        "\n",
        "# -------- load Logosfield map --------\n",
        "from google.colab import files as colab_files\n",
        "print(\"Upload your Logosfield map (.npy) — dphi preferred, scalar fallback.\")\n",
        "up = colab_files.upload()\n",
        "map_name = list(up.keys())[0]\n",
        "arr = np.load(map_name, allow_pickle=False)\n",
        "if arr.ndim==1:\n",
        "    dphi_map, scalar_map, map_kind = np.asarray(arr,float), None, \"dphi\"\n",
        "else:\n",
        "    dphi_map, scalar_map, map_kind = None, np.asarray(arr,float), \"scalar\"\n",
        "print(f\"Loaded {map_kind} map: {map_name}\")\n",
        "\n",
        "# -------- compute alignments --------\n",
        "summary = []\n",
        "\n",
        "# Overall\n",
        "summary.append(align_df(df, map_kind, dphi_map, scalar_map, \"ALL\"))\n",
        "\n",
        "# Per source\n",
        "if \"source\" in df.columns:\n",
        "    for src, sub in df.groupby(\"source\", dropna=False):\n",
        "        summary.append(align_df(sub, map_kind, dphi_map, scalar_map, f\"source={src}\"))\n",
        "\n",
        "# Global redshift bins\n",
        "if \"z\" in df.columns:\n",
        "    df = df.copy()\n",
        "    df[\"z_bin\"] = pd.cut(df[\"z\"], bins=Z_BINS, right=False)  # [lo,hi)\n",
        "    for zb, sub in df.groupby(\"z_bin\", dropna=False):\n",
        "        tag = f\"zbin={zb}\" if pd.notna(zb) else \"zbin=NaN\"\n",
        "        summary.append(align_df(sub, map_kind, dphi_map, scalar_map, tag))\n",
        "\n",
        "    # Source × z-bin\n",
        "    if \"source\" in df.columns:\n",
        "        for (src, zb), sub in df.groupby([\"source\",\"z_bin\"], dropna=False):\n",
        "            tag = f\"source={src} | zbin={zb}\" if pd.notna(zb) else f\"source={src} | zbin=NaN\"\n",
        "            summary.append(align_df(sub, map_kind, dphi_map, scalar_map, tag))\n",
        "\n",
        "# -------- save outputs --------\n",
        "import time\n",
        "ts = time.strftime(\"%Y%m%dT%H%M%SZ\", time.gmtime())\n",
        "summ_df = pd.DataFrame(summary)\n",
        "summ_df = summ_df.sort_values([\"tag\"]).reset_index(drop=True)\n",
        "\n",
        "csv_path  = os.path.join(OUTDIR, f\"alignment_summary_with_zbins_{ts}.csv\")\n",
        "json_path = os.path.join(OUTDIR, f\"alignment_summary_with_zbins_{ts}.json\")\n",
        "summ_df.to_csv(csv_path, index=False)\n",
        "with open(json_path, \"w\") as f: json.dump(summary, f, indent=2)\n",
        "\n",
        "print(\"\\n== Alignment Summary (first 20 rows) ==\")\n",
        "print(summ_df.head(20).to_string(index=False))\n",
        "print(f\"\\nSaved:\\n  {csv_path}\\n  {json_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 348
        },
        "id": "OJR-eb5eTjgm",
        "outputId": "0e770d27-61ce-4c47-8a39-90302cbd2e36"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 681424 rows.\n",
            "Upload your Logosfield map (.npy) — dphi preferred, scalar fallback.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-28feccae-262a-4886-bc75-90eca248df3f\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-28feccae-262a-4886-bc75-90eca248df3f\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Logosfield_dphi_map.npy to Logosfield_dphi_map (7).npy\n",
            "Loaded dphi map: Logosfield_dphi_map (7).npy\n",
            "\n",
            "== Alignment Summary (first 20 rows) ==\n",
            "                                                                          tag  nside  N_rows  N_used_eff  k_aligned_eff  fraction_aligned  ci95_lo  ci95_hi\n",
            "                                                                          ALL    128  681424    681424.0       344080.0          0.504943 0.503755 0.506130\n",
            "         source=GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED (1).xlsx::in    128  667944    667944.0       337381.0          0.505104 0.503905 0.506303\n",
            "                                source=HSC_STANDARDIZED copy (1) (2).xlsx::in    128   13476     13476.0         6699.0          0.497106 0.488666 0.505547\n",
            "source=master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1) (1).xlsx::in    128       4         4.0            0.0          0.000000 0.000000 0.489900\n",
            "\n",
            "Saved:\n",
            "  alignment_outputs/alignment_summary_with_zbins_20250902T024236Z.csv\n",
            "  alignment_outputs/alignment_summary_with_zbins_20250902T024236Z.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Robust plotting of Alignment vs Redshift (with 95% CI error bars) ===\n",
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt, glob, re\n",
        "\n",
        "# Load latest z-bin summary\n",
        "paths = sorted(glob.glob(\"alignment_outputs/alignment_summary_with_zbins_*.csv\"))\n",
        "if not paths:\n",
        "    raise FileNotFoundError(\"No alignment_summary_with_zbins_*.csv in alignment_outputs/\")\n",
        "csv_path = paths[-1]\n",
        "print(\"Loading\", csv_path)\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "# Helpers\n",
        "def extract_edges(series):\n",
        "    \"\"\"\n",
        "    Parse strings like 'zbin=[0.0, 0.5)' and return a DataFrame with columns z_lo,z_hi.\n",
        "    Non-matching rows become NaN and will be dropped by caller.\n",
        "    \"\"\"\n",
        "    # Grab the two numbers inside the bracket pair\n",
        "    m = series.str.extract(r\"\\[([0-9.+-eE]+)\\s*,\\s*([0-9.+-eE]+)\\)\")\n",
        "    m = m.rename(columns={0: \"z_lo\", 1: \"z_hi\"}).astype(float)\n",
        "    return m\n",
        "\n",
        "def add_bin_centers(frame):\n",
        "    frame[\"z_center\"] = (frame[\"z_lo\"] + frame[\"z_hi\"]) / 2.0\n",
        "    frame = frame.sort_values(\"z_center\")\n",
        "    return frame\n",
        "\n",
        "def add_yerr(frame):\n",
        "    frame[\"yerr_lo\"] = frame[\"fraction_aligned\"] - frame[\"ci95_lo\"]\n",
        "    frame[\"yerr_hi\"] = frame[\"ci95_hi\"] - frame[\"fraction_aligned\"]\n",
        "    return frame\n",
        "\n",
        "# Split global vs per-source rows\n",
        "zbins_raw    = df[df[\"tag\"].str.startswith(\"zbin=\")].copy()\n",
        "src_zbins_raw = df[df[\"tag\"].str.contains(r\"^source=.*\\|\\s*zbin=\", regex=True)].copy()\n",
        "\n",
        "# Parse edges robustly\n",
        "if not zbins_raw.empty:\n",
        "    edges = extract_edges(zbins_raw[\"tag\"])\n",
        "    zbins = pd.concat([zbins_raw.reset_index(drop=True), edges], axis=1).dropna(subset=[\"z_lo\",\"z_hi\"])\n",
        "    zbins = add_bin_centers(add_yerr(zbins))\n",
        "else:\n",
        "    zbins = pd.DataFrame()\n",
        "\n",
        "if not src_zbins_raw.empty:\n",
        "    sedges = extract_edges(src_zbins_raw[\"tag\"])\n",
        "    src_zbins = pd.concat([src_zbins_raw.reset_index(drop=True), sedges], axis=1).dropna(subset=[\"z_lo\",\"z_hi\"])\n",
        "    # pull source label\n",
        "    src_zbins[\"source\"] = src_zbins[\"tag\"].str.extract(r\"source=(.*?)\\s*\\|\")\n",
        "    src_zbins = add_bin_centers(add_yerr(src_zbins))\n",
        "else:\n",
        "    src_zbins = pd.DataFrame()\n",
        "\n",
        "# --- Plot: Global z-bins ---\n",
        "if not zbins.empty:\n",
        "    plt.figure(figsize=(7,5))\n",
        "    plt.errorbar(\n",
        "        zbins[\"z_center\"], zbins[\"fraction_aligned\"],\n",
        "        yerr=[zbins[\"yerr_lo\"], zbins[\"yerr_hi\"]],\n",
        "        fmt=\"o-\", capsize=3, label=\"All sources\"\n",
        "    )\n",
        "    plt.axhline(0.5, linestyle=\"--\")\n",
        "    plt.xlabel(\"Redshift (bin center)\")\n",
        "    plt.ylabel(\"Fraction aligned\")\n",
        "    plt.title(\"Alignment fraction vs z (All sources)\")\n",
        "    plt.grid(True); plt.legend(); plt.show()\n",
        "else:\n",
        "    print(\"No global z-bin rows found in the summary.\")\n",
        "\n",
        "# --- Plot: per-source z-bins ---\n",
        "if not src_zbins.empty:\n",
        "    plt.figure(figsize=(8,6))\n",
        "    for src, sub in src_zbins.groupby(\"source\"):\n",
        "        plt.errorbar(\n",
        "            sub[\"z_center\"], sub[\"fraction_aligned\"],\n",
        "            yerr=[sub[\"yerr_lo\"], sub[\"yerr_hi\"]],\n",
        "            fmt=\"o-\", capsize=3, label=str(src)[:50]\n",
        "        )\n",
        "    plt.axhline(0.5, linestyle=\"--\")\n",
        "    plt.xlabel(\"Redshift (bin center)\")\n",
        "    plt.ylabel(\"Fraction aligned\")\n",
        "    plt.title(\"Alignment fraction vs z (per source)\")\n",
        "    plt.grid(True); plt.legend(); plt.show()\n",
        "else:\n",
        "    print(\"No per-source z-bin rows found in the summary.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S3OqdgofUhz1",
        "outputId": "1f772ea3-4ed3-410b-b678-df31482c104d"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading alignment_outputs/alignment_summary_with_zbins_20250902T024236Z.csv\n",
            "No global z-bin rows found in the summary.\n",
            "No per-source z-bin rows found in the summary.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Robust plotting: Alignment fraction vs Redshift (global + per-source) ===\n",
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt, glob, re\n",
        "\n",
        "# 1) Load the latest z-bin summary CSV\n",
        "paths = sorted(glob.glob(\"alignment_outputs/alignment_summary_with_zbins_*.csv\"))\n",
        "if not paths:\n",
        "    raise FileNotFoundError(\"No alignment_summary_with_zbins_*.csv found in alignment_outputs/\")\n",
        "csv_path = paths[-1]\n",
        "print(\"Loading\", csv_path)\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "# 2) Identify rows that have z-bin info\n",
        "#    Global: tag has zbin= but NOT source=\n",
        "#    Per-source: tag has both source= and zbin=\n",
        "mask_zbin  = df[\"tag\"].astype(str).str.contains(\"zbin=\")\n",
        "mask_src   = df[\"tag\"].astype(str).str.contains(\"source=\")\n",
        "zbins_raw      = df[ mask_zbin & ~mask_src ].copy()\n",
        "src_zbins_raw  = df[ mask_zbin &  mask_src ].copy()\n",
        "\n",
        "# 3) Parse [lo, hi) edges safely from tag strings\n",
        "def extract_edges(series: pd.Series) -> pd.DataFrame:\n",
        "    # Works for \"... zbin=[0.0, 0.5) ...\" anywhere in the tag\n",
        "    m = series.astype(str).str.extract(r\"\\[([0-9.+-eE]+)\\s*,\\s*([0-9.+-eE]+)\\)\")\n",
        "    m = m.rename(columns={0: \"z_lo\", 1: \"z_hi\"}).astype(float)\n",
        "    return m\n",
        "\n",
        "def add_helpers(frame: pd.DataFrame) -> pd.DataFrame:\n",
        "    frame = frame.copy()\n",
        "    frame[\"z_center\"] = (frame[\"z_lo\"] + frame[\"z_hi\"]) / 2.0\n",
        "    frame[\"yerr_lo\"]  = frame[\"fraction_aligned\"] - frame[\"ci95_lo\"]\n",
        "    frame[\"yerr_hi\"]  = frame[\"ci95_hi\"] - frame[\"fraction_aligned\"]\n",
        "    return frame.sort_values(\"z_center\")\n",
        "\n",
        "zbins = pd.DataFrame()\n",
        "if not zbins_raw.empty:\n",
        "    edges = extract_edges(zbins_raw[\"tag\"])\n",
        "    zbins = pd.concat([zbins_raw.reset_index(drop=True), edges], axis=1).dropna(subset=[\"z_lo\",\"z_hi\"])\n",
        "    zbins = add_helpers(zbins)\n",
        "\n",
        "src_zbins = pd.DataFrame()\n",
        "if not src_zbins_raw.empty:\n",
        "    sedges = extract_edges(src_zbins_raw[\"tag\"])\n",
        "    src_zbins = pd.concat([src_zbins_raw.reset_index(drop=True), sedges], axis=1).dropna(subset=[\"z_lo\",\"z_hi\"])\n",
        "    # extract the source name for grouping\n",
        "    src_zbins[\"source\"] = src_zbins[\"tag\"].str.extract(r\"source=(.*?)\\s*(?:\\||$)\")\n",
        "    src_zbins = add_helpers(src_zbins)\n",
        "\n",
        "# 4) Preview parsed tables\n",
        "print(\"\\n=== Parsed global z-bins (head) ===\")\n",
        "print(zbins[[\"tag\",\"z_lo\",\"z_hi\",\"N_rows\",\"N_used_eff\",\"fraction_aligned\",\"ci95_lo\",\"ci95_hi\"]]\n",
        "      .head(10).to_string(index=False) if not zbins.empty else \"(none)\")\n",
        "\n",
        "print(\"\\n=== Parsed per-source z-bins (head) ===\")\n",
        "print(src_zbins[[\"source\",\"tag\",\"z_lo\",\"z_hi\",\"N_rows\",\"N_used_eff\",\"fraction_aligned\",\"ci95_lo\",\"ci95_hi\"]]\n",
        "      .head(10).to_string(index=False) if not src_zbins.empty else \"(none)\")\n",
        "\n",
        "# 5) Plot global z-bins\n",
        "if not zbins.empty:\n",
        "    plt.figure(figsize=(7,5))\n",
        "    plt.errorbar(\n",
        "        (zbins[\"z_lo\"]+zbins[\"z_hi\"])/2.0,\n",
        "        zbins[\"fraction_aligned\"],\n",
        "        yerr=[zbins[\"yerr_lo\"], zbins[\"yerr_hi\"]],\n",
        "        fmt=\"o-\", capsize=3, label=\"All sources\"\n",
        "    )\n",
        "    plt.axhline(0.5, linestyle=\"--\")\n",
        "    plt.xlabel(\"Redshift (bin center)\")\n",
        "    plt.ylabel(\"Fraction aligned\")\n",
        "    plt.title(\"Alignment fraction vs z (All sources)\")\n",
        "    plt.grid(True); plt.legend(); plt.show()\n",
        "else:\n",
        "    print(\"\\n(No global z-bin rows found.)\")\n",
        "\n",
        "# 6) Plot per-source z-bins\n",
        "if not src_zbins.empty:\n",
        "    plt.figure(figsize=(8,6))\n",
        "    for src, sub in src_zbins.groupby(\"source\"):\n",
        "        centers = (sub[\"z_lo\"]+sub[\"z_hi\"])/2.0\n",
        "        plt.errorbar(\n",
        "            centers,\n",
        "            sub[\"fraction_aligned\"],\n",
        "            yerr=[sub[\"yerr_lo\"], sub[\"yerr_hi\"]],\n",
        "            fmt=\"o-\", capsize=3, label=str(src)[:48]\n",
        "        )\n",
        "    plt.axhline(0.5, linestyle=\"--\")\n",
        "    plt.xlabel(\"Redshift (bin center)\")\n",
        "    plt.ylabel(\"Fraction aligned\")\n",
        "    plt.title(\"Alignment fraction vs z (per source)\")\n",
        "    plt.grid(True); plt.legend(); plt.show()\n",
        "else:\n",
        "    print(\"\\n(No per-source z-bin rows found.)\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IDu71vdtVQ8N",
        "outputId": "1270df55-9698-432f-f311-2c3c3506f75a"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading alignment_outputs/alignment_summary_with_zbins_20250902T024236Z.csv\n",
            "\n",
            "=== Parsed global z-bins (head) ===\n",
            "(none)\n",
            "\n",
            "=== Parsed per-source z-bins (head) ===\n",
            "(none)\n",
            "\n",
            "(No global z-bin rows found.)\n",
            "\n",
            "(No per-source z-bin rows found.)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the summary with z-bins\n",
        "df = pd.read_csv(\"alignment_outputs/alignment_summary_with_zbins_20250902T024236Z.csv\")\n",
        "\n",
        "print(\"Columns:\", df.columns.tolist())\n",
        "print(\"\\nFirst 15 tags in the CSV:\")\n",
        "print(df[\"tag\"].head(15).tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RISY7aqbV8vC",
        "outputId": "52d8a3c3-5f6c-4987-cdda-53259fc93285"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columns: ['tag', 'nside', 'N_rows', 'N_used_eff', 'k_aligned_eff', 'fraction_aligned', 'ci95_lo', 'ci95_hi']\n",
            "\n",
            "First 15 tags in the CSV:\n",
            "['ALL', 'source=GZ1_spiral_cleaned_RAdecCW copy (1)_STANDARDIZED (1).xlsx::in', 'source=HSC_STANDARDIZED copy (1) (2).xlsx::in', 'source=master_highz_plus_goodsn_filled copy (1)_STANDARDIZED (1) (1).xlsx::in']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os, zipfile\n",
        "\n",
        "# Step 1. Confirm the CSV is present\n",
        "csv_path = \"/mnt/data/normalized_outputs/merged_all_with_z.csv\"\n",
        "print(\"CSV exists:\", os.path.exists(csv_path))\n",
        "\n",
        "# Step 2. Package it into a ZIP if it exists\n",
        "zip_path = \"/mnt/data/merged_all_with_z_bundle.zip\"\n",
        "if os.path.exists(csv_path):\n",
        "    with zipfile.ZipFile(zip_path, \"w\", zipfile.ZIP_DEFLATED) as zf:\n",
        "        zf.write(csv_path, arcname=\"merged_all_with_z.csv\")\n",
        "    print(\"Wrote ZIP:\", zip_path)\n",
        "else:\n",
        "    print(\"CSV not found at\", csv_path)\n",
        "\n",
        "zip_path\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "KlnpucZRm5ig",
        "outputId": "4de2e91b-3d8d-4abc-e875-0e21ad106801"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CSV exists: False\n",
            "CSV not found at /mnt/data/normalized_outputs/merged_all_with_z.csv\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/mnt/data/merged_all_with_z_bundle.zip'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os, io, zipfile\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from google.colab import files\n",
        "\n",
        "def load_results_summary():\n",
        "    up = files.upload()\n",
        "    name = list(up.keys())[0]\n",
        "    data = up[name]\n",
        "    if name.lower().endswith(\".zip\"):\n",
        "        with zipfile.ZipFile(io.BytesIO(data)) as z:\n",
        "            names = z.namelist()\n",
        "            csvs = [n for n in names if n.lower().endswith(\".csv\")]\n",
        "            pick = None\n",
        "            # prefer results_summary.csv\n",
        "            for n in csvs:\n",
        "                if \"results_summary\" in n.lower():\n",
        "                    pick = n; break\n",
        "            if pick is None and csvs:\n",
        "                pick = csvs[0]\n",
        "            if pick is None:\n",
        "                raise SystemExit(\"No CSV found inside the zip.\")\n",
        "            print(\"Using CSV from ZIP:\", pick)\n",
        "            return pd.read_csv(io.BytesIO(z.read(pick))), pick\n",
        "    else:\n",
        "        if not name.lower().endswith(\".csv\"):\n",
        "            raise SystemExit(\"Upload the validated ZIP or results_summary.csv.\")\n",
        "        return pd.read_csv(io.BytesIO(data)), name\n",
        "\n",
        "df, src_name = load_results_summary()\n",
        "print(\"Columns:\", list(df.columns))\n",
        "\n",
        "# expected columns in this pooled summary\n",
        "if not {\"dataset\",\"alignment_fraction\"}.issubset(set(df.columns)):\n",
        "    raise SystemExit(\"Expected columns 'dataset' and 'alignment_fraction' not found.\")\n",
        "\n",
        "# optional p_value / null_fraction\n",
        "has_p = \"p_value\" in df.columns\n",
        "has_null = \"null_fraction\" in df.columns\n",
        "\n",
        "df_plot = df.copy()\n",
        "df_plot = df_plot.sort_values(\"alignment_fraction\", ascending=False)\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.axhline(0.5, color=\"gray\", linestyle=\"--\", label=\"Random baseline (50%)\")\n",
        "plt.bar(df_plot[\"dataset\"], df_plot[\"alignment_fraction\"]*100.0)\n",
        "plt.ylabel(\"Alignment Percentage (%)\")\n",
        "plt.title(\"Mechanism #1 — Pooled Alignment by Dataset (validated)\")\n",
        "plt.grid(axis=\"y\", alpha=0.3)\n",
        "\n",
        "# annotate p-values if present\n",
        "if has_p:\n",
        "    for x,(ds, y, p) in enumerate(zip(df_plot[\"dataset\"], df_plot[\"alignment_fraction\"], df_plot[\"p_value\"])):\n",
        "        plt.text(x, y*100.0+0.5, f\"p={p:.2e}\", ha=\"center\", va=\"bottom\", fontsize=9)\n",
        "\n",
        "plt.ylim(0, max(70, (df_plot[\"alignment_fraction\"].max()*100.0)+5))\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "\n",
        "out_png = \"Mechanism1_pooled_alignment_by_dataset.png\"\n",
        "plt.savefig(out_png, dpi=150, bbox_inches=\"tight\")\n",
        "plt.show()\n",
        "print(\"Saved:\", out_png)\n",
        "display(df_plot)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "IL8FC1_WtRcb",
        "outputId": "dc7f2b9b-2f5d-4987-b3c0-b00a90162f56"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-64040f02-80db-4629-9ab4-ccf0ad3e58dc\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-64040f02-80db-4629-9ab4-ccf0ad3e58dc\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Mechanism1_SpinAlignment_Validated_Results (1) (1).zip to Mechanism1_SpinAlignment_Validated_Results (1) (1) (4).zip\n",
            "Using CSV from ZIP: results_summary.csv\n",
            "Columns: ['dataset', 'alignment_fraction', 'null_fraction', 'p_value']\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Unknown format code 'e' for object of type 'str'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1647724428.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhas_p\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_plot\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"dataset\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_plot\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alignment_fraction\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_plot\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"p_value\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m100.0\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"p={p:.2e}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"center\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mva\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"bottom\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m70\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdf_plot\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alignment_fraction\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m100.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Unknown format code 'e' for object of type 'str'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# df_plot must already be defined from results_summary.csv\n",
        "\n",
        "plt.figure(figsize=(6,5))\n",
        "bars = plt.bar(\n",
        "    df_plot[\"dataset\"],\n",
        "    df_plot[\"alignment_fraction\"]*100.0,\n",
        "    color=\"steelblue\"\n",
        ")\n",
        "\n",
        "# Convert p-values to numeric if possible\n",
        "if \"p_value\" in df_plot.columns:\n",
        "    pvals = pd.to_numeric(df_plot[\"p_value\"], errors=\"coerce\")\n",
        "else:\n",
        "    pvals = pd.Series([np.nan]*len(df_plot), index=df_plot.index)\n",
        "\n",
        "# Add text labels above each bar\n",
        "for bar, p in zip(bars, pvals):\n",
        "    height = bar.get_height()\n",
        "    label = f\"p={p:.2e}\" if np.isfinite(p) else \"p=n/a\"\n",
        "    plt.text(bar.get_x() + bar.get_width()/2, height + 0.8,\n",
        "             label, ha=\"center\", va=\"bottom\", fontsize=9)\n",
        "\n",
        "plt.axhline(50, color=\"gray\", linestyle=\"--\", label=\"Random baseline (50%)\")\n",
        "plt.ylabel(\"Alignment Percentage (%)\")\n",
        "plt.title(\"Mechanism #1 — Pooled Alignment by Dataset (validated)\")\n",
        "plt.ylim(0, max(70, (df_plot[\"alignment_fraction\"].max()*100.0) + 5))\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "c3645p1KuPTt",
        "outputId": "a4bf025c-29fa-4dd8-dfbc-d708762d0026"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ---- SAFE p-value annotations (drop-in patch) ----\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# df_plot must already exist, with columns: dataset, alignment_fraction, (optional) p_value\n",
        "\n",
        "# Convert p_value to numeric safely\n",
        "if \"p_value\" in df_plot.columns:\n",
        "    pvals = pd.to_numeric(df_plot[\"p_value\"], errors=\"coerce\")\n",
        "else:\n",
        "    pvals = pd.Series([np.nan]*len(df_plot), index=df_plot.index)\n",
        "\n",
        "# Add text labels above bars\n",
        "for x, (y_pct, p) in enumerate(zip(df_plot[\"alignment_fraction\"]*100.0, pvals)):\n",
        "    label = f\"p={p:.2e}\" if np.isfinite(p) else \"p=n/a\"\n",
        "    plt.text(x, y_pct + 0.8, label, ha=\"center\", va=\"bottom\", fontsize=9)\n",
        "\n",
        "# Make sure the top of the chart isn't clipped\n",
        "plt.ylim(0, max(70, (df_plot[\"alignment_fraction\"].max()*100.0) + 5))\n",
        "plt.tight_layout()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "Bf41f1Dbt2w-",
        "outputId": "31d42bb8-1956-44b7-9297-dcbe04f1e098"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}